{"ast":null,"code":"var _jsxFileName = \"/home/lambamansha/Desktop/minorproject/src/views/CardFlipGame/index.jsx\";\nimport React, { PureComponent } from \"react\";\nimport { withStyles } from \"@material-ui/styles\";\nimport Header from \"./components/header/Header\";\nimport Card from \"./components/card/card\";\nimport GameOver from \"./components/card/GameOver\";\nimport { APTITUDE } from \"../../constants\";\nimport \"./styles/main.css\";\nimport { Dashboard as DashboardLayout } from \"layouts\";\nimport styles from \"./styles\";\nimport style from \"./style.module.css\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { connect } from \"react-redux\";\nimport swal from \"sweetalert\";\n\nclass CardFlipGame extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFlipped: Array(16).fill(false),\n      shuffledCard: CardFlipGame.duplicateCard().sort(() => Math.random() - 0.5),\n      clickCount: 1,\n      prevSelectedCard: -1,\n      prevCardId: -1\n    };\n\n    this.handleClick = event => {\n      event.preventDefault();\n      const cardId = event.target.id;\n      const newFlipps = this.state.isFlipped.slice();\n      this.setState({\n        prevSelectedCard: this.state.shuffledCard[cardId],\n        prevCardId: cardId\n      });\n\n      if (newFlipps[cardId] === false) {\n        newFlipps[cardId] = !newFlipps[cardId];\n        this.setState(prevState => ({\n          isFlipped: newFlipps,\n          clickCount: this.state.clickCount + 1\n        }));\n\n        if (this.state.clickCount === 2) {\n          this.setState({\n            clickCount: 1\n          });\n          const prevCardId = this.state.prevCardId;\n          const newCard = this.state.shuffledCard[cardId];\n          const previousCard = this.state.prevSelectedCard;\n          this.isCardMatch(previousCard, newCard, prevCardId, cardId);\n        }\n      }\n    };\n\n    this.isCardMatch = (card1, card2, card1Id, card2Id) => {\n      if (card1 === card2) {\n        const hideCard = this.state.shuffledCard.slice();\n        hideCard[card1Id] = -1;\n        hideCard[card2Id] = -1; //update aptitude score\n\n        this.props.add20();\n        setTimeout(() => {\n          this.setState(prevState => ({\n            shuffledCard: hideCard\n          }));\n        }, 2000);\n      } else {\n        const flipBack = this.state.isFlipped.slice();\n        flipBack[card1Id] = false;\n        flipBack[card2Id] = false;\n        setTimeout(() => {\n          this.setState(prevState => ({\n            isFlipped: flipBack\n          }));\n        }, 2000);\n      }\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        isFlipped: Array(16).fill(false),\n        shuffledCard: CardFlipGame.duplicateCard().sort(() => Math.random() - 0.5),\n        clickCount: 1,\n        prevSelectedCard: -1,\n        prevCardId: -1\n      });\n    };\n\n    this.isGameOver = () => {\n      return this.state.isFlipped.every((element, index, array) => element !== false);\n    };\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const bull = React.createElement(\"span\", {\n      className: classes.bullet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"\\u2022\");\n    return React.createElement(DashboardLayout, {\n      mode: APTITUDE,\n      title: \"Card Flip Game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Header, {\n      restartGame: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), this.isGameOver() ? React.createElement(GameOver, {\n      restartGame: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, this.state.shuffledCard.map((cardNumber, index) => React.createElement(Card, {\n      key: index,\n      id: index,\n      cardNumber: cardNumber,\n      isFlipped: this.state.isFlipped[index],\n      handleClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nCardFlipGame.duplicateCard = () => {\n  return [0, 1, 2, 3, 4, 5, 6, 7].reduce((preValue, current, index, array) => {\n    return preValue.concat([current, current]);\n  }, []);\n};\n\nconst MapStatetoProps = state => {\n  return {\n    token: state.auth.token\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    add20: () => dispatch({\n      type: \"ADD 20\"\n    })\n  };\n};\n\nexport default connect(MapStatetoProps, mapDispatchToProps)(withStyles(styles)(CardFlipGame));","map":{"version":3,"sources":["/home/lambamansha/Desktop/minorproject/src/views/CardFlipGame/index.jsx"],"names":["React","PureComponent","withStyles","Header","Card","GameOver","APTITUDE","Dashboard","DashboardLayout","styles","style","Typography","connect","swal","CardFlipGame","state","isFlipped","Array","fill","shuffledCard","duplicateCard","sort","Math","random","clickCount","prevSelectedCard","prevCardId","handleClick","event","preventDefault","cardId","target","id","newFlipps","slice","setState","prevState","newCard","previousCard","isCardMatch","card1","card2","card1Id","card2Id","hideCard","props","add20","setTimeout","flipBack","restartGame","isGameOver","every","element","index","array","render","classes","bull","bullet","root","map","cardNumber","reduce","preValue","current","concat","MapStatetoProps","token","auth","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport { withStyles } from \"@material-ui/styles\";\n\nimport Header from \"./components/header/Header\";\nimport Card from \"./components/card/card\";\nimport GameOver from \"./components/card/GameOver\";\nimport { APTITUDE } from \"../../constants\";\nimport \"./styles/main.css\";\n\nimport { Dashboard as DashboardLayout } from \"layouts\";\n\nimport styles from \"./styles\";\nimport style from \"./style.module.css\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { connect } from \"react-redux\";\n\nimport swal from \"sweetalert\";\n\nclass CardFlipGame extends PureComponent {\n  state = {\n    isFlipped: Array(16).fill(false),\n    shuffledCard: CardFlipGame.duplicateCard().sort(() => Math.random() - 0.5),\n    clickCount: 1,\n    prevSelectedCard: -1,\n    prevCardId: -1\n  };\n\n  static duplicateCard = () => {\n    return [0, 1, 2, 3, 4, 5, 6, 7].reduce(\n      (preValue, current, index, array) => {\n        return preValue.concat([current, current]);\n      },\n      []\n    );\n  };\n\n  handleClick = event => {\n    event.preventDefault();\n    const cardId = event.target.id;\n    const newFlipps = this.state.isFlipped.slice();\n    this.setState({\n      prevSelectedCard: this.state.shuffledCard[cardId],\n      prevCardId: cardId\n    });\n\n    if (newFlipps[cardId] === false) {\n      newFlipps[cardId] = !newFlipps[cardId];\n      this.setState(prevState => ({\n        isFlipped: newFlipps,\n        clickCount: this.state.clickCount + 1\n      }));\n\n      if (this.state.clickCount === 2) {\n        this.setState({ clickCount: 1 });\n        const prevCardId = this.state.prevCardId;\n        const newCard = this.state.shuffledCard[cardId];\n        const previousCard = this.state.prevSelectedCard;\n\n        this.isCardMatch(previousCard, newCard, prevCardId, cardId);\n      }\n    }\n  };\n\n  isCardMatch = (card1, card2, card1Id, card2Id) => {\n    if (card1 === card2) {\n      const hideCard = this.state.shuffledCard.slice();\n      hideCard[card1Id] = -1;\n      hideCard[card2Id] = -1;\n      //update aptitude score\n      this.props.add20();\n\n      setTimeout(() => {\n        this.setState(prevState => ({\n          shuffledCard: hideCard\n        }));\n      }, 2000);\n    } else {\n      const flipBack = this.state.isFlipped.slice();\n      flipBack[card1Id] = false;\n      flipBack[card2Id] = false;\n      setTimeout(() => {\n        this.setState(prevState => ({ isFlipped: flipBack }));\n      }, 2000);\n    }\n  };\n\n  restartGame = () => {\n    this.setState({\n      isFlipped: Array(16).fill(false),\n      shuffledCard: CardFlipGame.duplicateCard().sort(\n        () => Math.random() - 0.5\n      ),\n      clickCount: 1,\n      prevSelectedCard: -1,\n      prevCardId: -1\n    });\n  };\n\n  isGameOver = () => {\n    return this.state.isFlipped.every(\n      (element, index, array) => element !== false\n    );\n  };\n\n  render() {\n    const { classes } = this.props;\n    const bull = <span className={classes.bullet}>•</span>;\n\n    return (\n      <DashboardLayout mode={APTITUDE} title=\"Card Flip Game\">\n        <div className={classes.root}>\n          <Header restartGame={this.restartGame} />\n          {this.isGameOver() ? (\n            <GameOver restartGame={this.restartGame} />\n          ) : (\n            <div className=\"grid-container\">\n              {this.state.shuffledCard.map((cardNumber, index) => (\n                <Card\n                  key={index}\n                  id={index}\n                  cardNumber={cardNumber}\n                  isFlipped={this.state.isFlipped[index]}\n                  handleClick={this.handleClick}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      </DashboardLayout>\n    );\n  }\n}\n\nconst MapStatetoProps = state => {\n  return {\n    token: state.auth.token\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    add20: () => dispatch({ type: \"ADD 20\" })\n  };\n};\n\nexport default connect(\n  MapStatetoProps,\n  mapDispatchToProps\n)(withStyles(styles)(CardFlipGame));\n"]},"metadata":{},"sourceType":"module"}