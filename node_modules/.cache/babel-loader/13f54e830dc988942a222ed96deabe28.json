{"ast":null,"code":"var _jsxFileName = \"/home/lambamansha/Desktop/minorproject/src/views/QuizList/index.jsx\";\nimport React, { Component } from \"react\";\nimport { Dashboard as DashboardLayout } from \"layouts\";\nimport { connect } from \"react-redux\";\nimport { APTITUDE } from \"../../constants\";\nimport Grid from \"./components/Grid\";\nimport { solver, isSolvable, isComplete } from \"./utils/sudoku\";\nimport { Typography } from \"@material-ui/core\"; // styles\n\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\n\nclass Sudoku extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.unsubscribe = this.props.store.subscribe(() => {\n      this.forceUpdate();\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    const classes = this.props.classes; // const { store } = this.props;\n    // const { grid, status } = store.getState();\n\n    const grid = this.props.grid;\n    const isSolved = this.props.isSolved;\n    const isEdited = this.props.isEdited; // const { isSolved, isEdited } = status;\n\n    return React.createElement(DashboardLayout, {\n      mode: APTITUDE,\n      title: \"Quizzes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"clear\",\n      disabled: !isEdited,\n      onClick: this.props.clear(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"\\u27F2 Clear\"), React.createElement(Grid, Object.assign({\n      grid: grid,\n      isSolved: isSolved\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      className: \"check\",\n      disabled: isSolved,\n      onClick: () => {\n        if (isSolvable(grid)) {\n          if (isComplete(grid)) {\n            return alert(\"Congratulations, you solved it!!\");\n          }\n\n          alert(\"This Sudoku is solvable, keep going !!\");\n        } else {\n          alert(\"This Sudoku is NOT solvable\");\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Check\"), React.createElement(\"button\", {\n      className: \"solve\",\n      onClick: this.props.solve(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Solve\"), React.createElement(\"div\", {\n      className: \"footnote\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"by \", React.createElement(\"a\", {\n      href: \"http://danialk.github.io/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \" Danial Khosravi \"), \" \")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    grid: state.sudokugrid.grid,\n    isSolved: state.sudokustatus.isSolved,\n    isEdited: state.sudokustatus.isEdited\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    undo: () => dispatch({\n      type: \"UNDO\"\n    }),\n    clear: () => dispatch({\n      type: \"CLEAR\"\n    }),\n    solve: () => dispatch({\n      type: \"SOLVE\"\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Sudoku));","map":{"version":3,"sources":["/home/lambamansha/Desktop/minorproject/src/views/QuizList/index.jsx"],"names":["React","Component","Dashboard","DashboardLayout","connect","APTITUDE","Grid","solver","isSolvable","isComplete","Typography","styles","withStyles","Sudoku","constructor","props","state","componentDidMount","unsubscribe","store","subscribe","forceUpdate","componentWillUnmount","render","classes","grid","isSolved","isEdited","root","clear","alert","solve","mapStateToProps","token","auth","sudokugrid","sudokustatus","mapDispatchToProps","dispatch","undo","type"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Dashboard as DashboardLayout } from \"layouts\";\n\nimport { connect } from \"react-redux\";\nimport { APTITUDE } from \"../../constants\";\nimport Grid from \"./components/Grid\";\nimport { solver, isSolvable, isComplete } from \"./utils/sudoku\";\n\nimport { Typography } from \"@material-ui/core\";\n\n// styles\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\n\nclass Sudoku extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.unsubscribe = this.props.store.subscribe(() => {\n      this.forceUpdate();\n    });\n  }\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    const { classes } = this.props;\n    // const { store } = this.props;\n    // const { grid, status } = store.getState();\n    const grid = this.props.grid;\n    const isSolved = this.props.isSolved;\n    const isEdited = this.props.isEdited;\n    // const { isSolved, isEdited } = status;\n    return (\n      <DashboardLayout mode={APTITUDE} title=\"Quizzes\">\n        <div className={classes.root}>\n          <div>\n            {/* <button\n              className=\"undo\"\n              disabled={window.gridHistory && !window.gridHistory.length}\n              onClick={this.props.undo()}\n            >\n              ⤺ Undo\n            </button> */}\n            <button\n              className=\"clear\"\n              disabled={!isEdited}\n              onClick={this.props.clear()}\n            >\n              ⟲ Clear\n            </button>\n\n            <Grid grid={grid} isSolved={isSolved} {...this.props} />\n\n            <button\n              className=\"check\"\n              disabled={isSolved}\n              onClick={() => {\n                if (isSolvable(grid)) {\n                  if (isComplete(grid)) {\n                    return alert(\"Congratulations, you solved it!!\");\n                  }\n                  alert(\"This Sudoku is solvable, keep going !!\");\n                } else {\n                  alert(\"This Sudoku is NOT solvable\");\n                }\n              }}\n            >\n              Check\n            </button>\n            <button className=\"solve\" onClick={this.props.solve()}>\n              Solve\n            </button>\n            <div className=\"footnote\">\n              <p>\n                by <a href=\"http://danialk.github.io/\"> Danial Khosravi </a>{\" \"}\n              </p>\n            </div>\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    grid: state.sudokugrid.grid,\n    isSolved: state.sudokustatus.isSolved,\n    isEdited: state.sudokustatus.isEdited\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    undo: () => dispatch({ type: \"UNDO\" }),\n    clear: () => dispatch({ type: \"CLEAR\" }),\n    solve: () => dispatch({ type: \"SOLVE\" })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(Sudoku));\n"]},"metadata":{},"sourceType":"module"}