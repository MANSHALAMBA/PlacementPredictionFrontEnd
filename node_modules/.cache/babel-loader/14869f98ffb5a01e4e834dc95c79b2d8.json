{"ast":null,"code":"import validate from \"validate.js\";\nimport moment from \"moment\";\nvalidate.extend(validate.validators.datetime, {\n  // The value is guaranteed not to be null or undefined but otherwise it\n  // could be anything.\n  parse: function (value, options) {\n    return +moment.utc(value);\n  },\n  // Input is a unix timestamp\n  format: function (value, options) {\n    var format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\";\n    return moment.utc(value).format(format);\n  }\n});\nexport class Quiz {\n  constructor(quiz) {\n    this.id = quiz.id;\n    this.title = quiz.title;\n    this.skills = quiz.tags;\n    this.numberOfQuestions = Number(quiz.noOfQuestions);\n    this.schedulingStatus = this.getSchedulingStatus(quiz);\n    this.schedule = quiz.sechedule;\n  }\n\n  getSchedulingStatus(quiz) {\n    console.log(\"qwer\");\n    let a = 0;\n    let error = validate(quiz.expiry, {\n      expiry: {\n        datetime: {\n          earliest: moment.utc(),\n          message: \"Expired\"\n        }\n      }\n    });\n\n    if (quiz.isActive && quiz.schedule && error) {\n      a = 3;\n      return a;\n    } else if (quiz.isActive && quiz.schedule) {\n      a = 1;\n      return a;\n    } else if (!quiz.isActive && quiz.schedule) {\n      a = 2;\n      return a;\n    } else if (!quiz.expiry) {\n      a = 0;\n      return a;\n    } else {\n      return a;\n    }\n  }\n\n}\nexport class Quizdetail {\n  constructor(quiz) {\n    this.title = quiz.title;\n    this.skills = quiz.tags.map(tag => {\n      return tag.tag;\n    });\n    this.numberOfQuestions = quiz.questions.length;\n    this.estimatedTime = quiz.timeToComplete;\n    this.Questions = quiz.questions.map(question => {\n      return {\n        questiontitle: question.question,\n        difficultyLevel: question.level,\n        skills: question.tags.map(tag => {\n          return tag.tag;\n        }),\n        id: question.id,\n        options: question.options\n      };\n    });\n  }\n\n}\nexport class Question {\n  constructor(question) {\n    this.questiontitle = question.question;\n    this.difficultyLevel = question.level;\n    this.skills = question.tags.map(tag => {\n      return tag.tag;\n    });\n    this.id = question.id;\n    this.options = question.options;\n  }\n\n}\nexport class StudentGroup {\n  constructor(group) {\n    this.type = \"group\";\n    this.id = group.id;\n    this.name = group.name;\n  }\n\n}\nexport class Lecture {\n  constructor(lecture) {\n    this.type = \"lecture\";\n    this.id = lecture.id;\n    this.name = lecture.classRoom.departmentCode + \" \" + lecture.classRoom.section + \" \" + lecture.classRoom.startYear + \" \" + \"Batch\";\n  }\n\n}","map":{"version":3,"sources":["/home/lambamansha/Desktop/faculty_portal/src/serializers/quiz.js"],"names":["validate","moment","extend","validators","datetime","parse","value","options","utc","format","dateOnly","Quiz","constructor","quiz","id","title","skills","tags","numberOfQuestions","Number","noOfQuestions","schedulingStatus","getSchedulingStatus","schedule","sechedule","console","log","a","error","expiry","earliest","message","isActive","Quizdetail","map","tag","questions","length","estimatedTime","timeToComplete","Questions","question","questiontitle","difficultyLevel","level","Question","StudentGroup","group","type","name","Lecture","lecture","classRoom","departmentCode","section","startYear"],"mappings":"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","sourcesContent":["import validate from \"validate.js\";\n\nimport moment from \"moment\";\n\nvalidate.extend(validate.validators.datetime, {\n\t// The value is guaranteed not to be null or undefined but otherwise it\n\t// could be anything.\n\tparse: function(value, options) {\n\t\treturn +moment.utc(value);\n\t},\n\t// Input is a unix timestamp\n\tformat: function(value, options) {\n\t\tvar format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\";\n\t\treturn moment.utc(value).format(format);\n\t}\n});\n\nexport class Quiz {\n\tconstructor(quiz) {\n\t\tthis.id = quiz.id;\n\t\tthis.title = quiz.title;\n\t\tthis.skills = quiz.tags;\n\t\tthis.numberOfQuestions = Number(quiz.noOfQuestions);\n\t\tthis.schedulingStatus = this.getSchedulingStatus(quiz);\n\n\t\tthis.schedule = quiz.sechedule;\n\t}\n\n\tgetSchedulingStatus(quiz) {\n\t\tconsole.log(\"qwer\");\n\t\tlet a = 0;\n\t\tlet error = validate(quiz.expiry, {\n\t\t\texpiry: {\n\t\t\t\tdatetime: {\n\t\t\t\t\tearliest: moment.utc(),\n\t\t\t\t\tmessage: \"Expired\"\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (quiz.isActive && quiz.schedule && error) {\n\t\t\ta = 3;\n\t\t\treturn a;\n\t\t} else if (quiz.isActive && quiz.schedule) {\n\t\t\ta = 1;\n\t\t\treturn a;\n\t\t} else if (!quiz.isActive && quiz.schedule) {\n\t\t\ta = 2;\n\t\t\treturn a;\n\t\t} else if (!quiz.expiry) {\n\t\t\ta = 0;\n\t\t\treturn a;\n\t\t} else {\n\t\t\treturn a;\n\t\t}\n\t}\n}\n\nexport class Quizdetail {\n\tconstructor(quiz) {\n\t\tthis.title = quiz.title;\n\t\tthis.skills = quiz.tags.map(tag => {\n\t\t\treturn tag.tag;\n\t\t});\n\t\tthis.numberOfQuestions = quiz.questions.length;\n\t\tthis.estimatedTime = quiz.timeToComplete;\n\t\tthis.Questions = quiz.questions.map(question => {\n\t\t\treturn {\n\t\t\t\tquestiontitle: question.question,\n\t\t\t\tdifficultyLevel: question.level,\n\t\t\t\tskills: question.tags.map(tag => {\n\t\t\t\t\treturn tag.tag;\n\t\t\t\t}),\n\t\t\t\tid: question.id,\n\t\t\t\toptions: question.options\n\t\t\t};\n\t\t});\n\t}\n}\n\nexport class Question {\n\tconstructor(question) {\n\t\tthis.questiontitle = question.question;\n\t\tthis.difficultyLevel = question.level;\n\t\tthis.skills = question.tags.map(tag => {\n\t\t\treturn tag.tag;\n\t\t});\n\t\tthis.id = question.id;\n\t\tthis.options = question.options;\n\t}\n}\n\nexport class StudentGroup {\n\tconstructor(group) {\n\t\tthis.type = \"group\";\n\t\tthis.id = group.id;\n\n\t\tthis.name = group.name;\n\t}\n}\n\nexport class Lecture {\n\tconstructor(lecture) {\n\t\tthis.type = \"lecture\";\n\t\tthis.id = lecture.id;\n\n\t\tthis.name =\n\t\t\tlecture.classRoom.departmentCode +\n\t\t\t\" \" +\n\t\t\tlecture.classRoom.section +\n\t\t\t\" \" +\n\t\t\tlecture.classRoom.startYear +\n\t\t\t\" \" +\n\t\t\t\"Batch\";\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}