{"ast":null,"code":"import _objectSpread from \"/home/lambamansha/Desktop/faculty_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/lambamansha/Desktop/faculty_portal/src/views/Quiz/components/EditQuiz/components/QuestionsForm/index.jsx\";\nimport React, { Component } from \"react\";\nimport ContentForm from \"./Form\";\nimport validate from \"validate.js\";\n\nclass QuestionsForm extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.getInitialState = props => {\n      if (props.mode === \"EDIT\") {\n        return {\n          data: _objectSpread({\n            title: \"\",\n            description: \"\",\n            url: \"\",\n            type: \"\",\n            year: \"\",\n            file: \"\"\n          }, props.data),\n          errors: {}\n        };\n      } else {\n        // default mode is assumed to be ADD\n        return {\n          data: {\n            questiontitle: \"\",\n            options: [\"\", \"\"],\n            difficultyLevel: \"\",\n            skills: []\n          },\n          errors: {}\n        };\n      }\n    };\n\n    this.onChangeHandler = e => {\n      const _e$target = e.target,\n            name = _e$target.name,\n            value = _e$target.value;\n      this.setState(prevState => {\n        return {\n          data: _objectSpread({}, prevState.data, {\n            [name]: value\n          }),\n          errors: _objectSpread({}, prevState.errors, {\n            [name]: null\n          })\n        };\n      });\n    };\n\n    this.onaddOption = () => {\n      this.setState(prevState => {\n        return {\n          data: _objectSpread({}, prevState.data, {\n            options: [...prevState.data.options, \"\"]\n          })\n        };\n      });\n      e.target.checked;\n    };\n\n    this.ondeleteOption = index => {\n      let options = this.state.data.options;\n      options.splice(index, 1);\n      this.setState(prevState => {\n        return {\n          data: _objectSpread({}, prevState.data, {\n            options: [...options]\n          })\n        };\n      });\n    };\n\n    this.onOptionChange = (e, index) => {\n      let options = this.state.data.options;\n      options[index] = e.target.option;\n      this.setState(prevState => {\n        return {\n          data: _objectSpread({}, prevState.data, {\n            options: [...options]\n          })\n        };\n      });\n    };\n\n    this.skillChange = (e, checked, skill) => {\n      if (checked) {\n        this.setState(prevState => {\n          return {\n            data: _objectSpread({}, prevState.data, {\n              skills: [...prevState.data.skills, skill]\n            })\n          };\n        });\n      } else {\n        let skills = this.state.data.skills;\n        let index = skills.indexOf(skill);\n        skills.splice(index, 1);\n        this.setState(prevState => {\n          return {\n            data: _objectSpread({}, prevState.data, {\n              skills: [...skills]\n            })\n          };\n        });\n      }\n    };\n\n    this.onSubmitHandler = () => {\n      console.log(\"submission handler\"); //validation\n\n      let errors = validate(this.state.data, {\n        title: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          }\n        },\n        description: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          }\n        },\n        url: {\n          url: true\n        },\n        type: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          }\n        },\n        year: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          }\n        },\n        file: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          }\n        }\n      }); // check for errors\n\n      if (errors) {\n        this.setState({\n          errors\n        });\n      }\n\n      console.log(errors);\n    };\n\n    this.state = this.getInitialState(_props);\n  }\n\n  render() {\n    return React.createElement(ContentForm, {\n      open: this.props.open,\n      onChangeHandler: this.onChangeHandler,\n      onSubmit: this.onSubmitHandler,\n      errors: this.state.errors,\n      data: this.state.data,\n      years: this.years,\n      types: this.types,\n      handleClose: this.props.handleClose,\n      mode: this.props.mode,\n      skills: this.props.skills,\n      onaddOption: this.onaddOption,\n      ondeleteOption: this.ondeleteOption,\n      onSkillChange: this.skillChange,\n      skillChange: this.skillChange,\n      onOptionChange: this.onOptionChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    });\n  }\n\n}\n\nQuestionsForm.defaultProps = {\n  mode: \"ADD\"\n};\nexport default QuestionsForm;","map":{"version":3,"sources":["/home/lambamansha/Desktop/faculty_portal/src/views/Quiz/components/EditQuiz/components/QuestionsForm/index.jsx"],"names":["React","Component","ContentForm","validate","QuestionsForm","constructor","props","getInitialState","mode","data","title","description","url","type","year","file","errors","questiontitle","options","difficultyLevel","skills","onChangeHandler","e","target","name","value","setState","prevState","onaddOption","checked","ondeleteOption","index","state","splice","onOptionChange","option","skillChange","skill","indexOf","onSubmitHandler","console","log","presence","allowEmpty","message","render","open","years","types","handleClose","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ContentForm from \"./Form\";\nimport validate from \"validate.js\";\n\nclass QuestionsForm extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = this.getInitialState(props);\n\t}\n\n\tstatic defaultProps = {\n\t\tmode: \"ADD\"\n\t};\n\n\tgetInitialState = props => {\n\t\tif (props.mode === \"EDIT\") {\n\t\t\treturn {\n\t\t\t\tdata: {\n\t\t\t\t\ttitle: \"\",\n\t\t\t\t\tdescription: \"\",\n\t\t\t\t\turl: \"\",\n\t\t\t\t\ttype: \"\",\n\t\t\t\t\tyear: \"\",\n\t\t\t\t\tfile: \"\",\n\t\t\t\t\t...props.data\n\t\t\t\t},\n\t\t\t\terrors: {}\n\t\t\t};\n\t\t} else {\n\t\t\t// default mode is assumed to be ADD\n\t\t\treturn {\n\t\t\t\tdata: {\n\t\t\t\t\tquestiontitle: \"\",\n\t\t\t\t\toptions:[\"\",\"\"],\n\t\t\t\t\tdifficultyLevel:\"\",\n\t\t\t\t\tskills:[]\n\t\t\t\t},\n\t\t\t\terrors: {}\n\t\t\t};\n\t\t}\n\t};\n\n\tonChangeHandler = e => {\n\t\tconst { name, value } = e.target;\n\n\t\tthis.setState(prevState => {\n\t\t\treturn {\n\t\t\t\tdata: {\n\t\t\t\t\t...prevState.data,\n\t\t\t\t\t[name]: value\n\t\t\t\t},\n\t\t\t\terrors: {\n\t\t\t\t\t...prevState.errors,\n\t\t\t\t\t[name]: null\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t};\n\n\tonaddOption =()=>{\n                    this.setState( prevState =>{  return {\n                                   data:{\n\t\t\t\t\t\t\t\t\t\t\t...prevState.data,\n\t\t\t\t\t\t\t\t\t\t\toptions:[...prevState.data.options , \"\"]\n\n\t\t\t\t\t\t\t\t   }\n\n\n\t\t\t\t\t  }  })\n\t\t\t\t\t  e.target.checked\n\n\t}\n\tondeleteOption =(index)=>{\n\tlet options=this.state.data.options;\n\toptions.splice(index,1);\n\t\tthis.setState( prevState =>{  return {\n\t\t\t\t\t   data:{\n\t\t\t\t\t\t\t\t...prevState.data,\n\n\t\t\t\t\t\t\t\toptions:[...options]\n\n\t\t\t\t\t   }\n\n\n\t\t  }  })\n\n\n}\n onOptionChange = (e,index) =>{\n\t\t\t\t\t\t\tlet options=this.state.data.options;  \n\t\t\t\t\t\t\toptions[index]=e.target.option;                                 \n                            this.setState(prevState =>{\n                                               return({ data: {\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ...prevState.data,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  options:[...options]\n\n\n\t\t\t\t\t\t\t\t\t\t\t   }});\n                                               } )\n                                               }\n\n  skillChange= (e,checked,skill) =>{\n\n                       if(checked){\n\t\t\t\t\t\t       this.setState(prevState =>{\n\t\t\t\t\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t\t               return (\n                                                        {\n                                                          data:{\n\n\n                                                             ...prevState.data,\n                                                                skills:[...prevState.data.skills ,skill]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t                                       }\n\t\t\t\t\t   else { \n\t\t\t\t\t\t   let skills=this.state.data.skills;\n\t\t\t\t\t\t   let index=skills.indexOf(skill); \n\t\t\t\t\t\t   skills.splice(index,1);              \n\t\t\t\t\t\tthis.setState( prevState => {\n                                                return({\n                                                    data:{\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   ...prevState.data,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   skills:[...skills]\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t}});\n                                                })\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\n\n\n\n\n\t\t\t\t\t   \n\n\n\n  \n\n\tonSubmitHandler = () => {\n\t\tconsole.log(\"submission handler\");\n\t\t//validation\n\t\tlet errors = validate(this.state.data, {\n\t\t\ttitle: { presence: { allowEmpty: false, message: \"is required\" } },\n\t\t\tdescription: { presence: { allowEmpty: false, message: \"is required\" } },\n\t\t\turl: { url: true },\n\t\t\ttype: { presence: { allowEmpty: false, message: \"is required\" } },\n\t\t\tyear: { presence: { allowEmpty: false, message: \"is required\" } },\n\t\t\tfile: { presence: { allowEmpty: false, message: \"is required\" } }\n\t\t});\n\n\t\t// check for errors\n\t\tif (errors) {\n\t\t\tthis.setState({ errors });\n\t\t}\n\t\tconsole.log(errors);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<ContentForm\n\t\t\t\topen={this.props.open}\n\t\t\t\tonChangeHandler={this.onChangeHandler}\n\t\t\t\tonSubmit={this.onSubmitHandler}\n\t\t\t\terrors={this.state.errors}\n\t\t\t\tdata={this.state.data}\n\t\t\t\tyears={this.years}\n\t\t\t\ttypes={this.types}\n\t\t\t\thandleClose={this.props.handleClose}\n\t\t\t\tmode={this.props.mode}\n\t\t\t\tskills={this.props.skills}\n\t\t\t\tonaddOption={this.onaddOption}\n\t\t\t\tondeleteOption ={this.ondeleteOption }\n\t\t\t\tonSkillChange={this.skillChange}\n\t\t\t\tskillChange={this.skillChange}\n\t\t\t\tonOptionChange={this.onOptionChange}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default QuestionsForm;\n"]},"metadata":{},"sourceType":"module"}