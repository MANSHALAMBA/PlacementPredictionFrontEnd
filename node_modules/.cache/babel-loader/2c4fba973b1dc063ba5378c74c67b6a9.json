{"ast":null,"code":"var _jsxFileName = \"/media/lambamansha/Seagate Expansion Drive/minorproject/src/layouts/Dashboard/components/Topbar/index.jsx\";\nimport React, { Component, Fragment } from \"react\";\nimport { withRouter } from \"react-router-dom\"; // Externals\n\nimport classNames from \"classnames\";\nimport compose from \"recompose/compose\";\nimport PropTypes from \"prop-types\"; // Material helpers\n\nimport { withStyles } from \"@material-ui/styles\"; // Material components\n\nimport { Badge, IconButton, Popover, Toolbar, Typography } from \"@material-ui/core\"; // Material icons\n\nimport { Menu as MenuIcon, Close as CloseIcon, NotificationsOutlined as NotificationsIcon, Input as InputIcon } from \"@material-ui/icons\"; // Shared services\n\nimport { getNotifications } from \"services/notification\"; // Custom components\n\nimport { NotificationList } from \"./components\"; // Component styles\n\nimport styles from \"./styles\";\n\nclass Topbar extends Component {\n  constructor(...args) {\n    super(...args);\n    this.signal = true;\n    this.state = {\n      notifications: [],\n      notificationsLimit: 4,\n      notificationsCount: 0,\n      notificationsEl: null\n    };\n\n    this.handleSignOut = () => {\n      // const { history } = this.props;\n      // history.push('/sign-in');\n      this.props.onLogOut();\n    };\n\n    this.handleShowNotifications = event => {\n      this.setState({\n        notificationsEl: event.currentTarget\n      });\n    };\n\n    this.handleCloseNotifications = () => {\n      this.setState({\n        notificationsEl: null\n      });\n    };\n  }\n\n  async getNotifications() {\n    try {\n      const notificationsLimit = this.state.notificationsLimit;\n\n      const _ref = await getNotifications(notificationsLimit),\n            notifications = _ref.notifications,\n            notificationsCount = _ref.notificationsCount;\n\n      if (this.signal) {\n        this.setState({\n          notifications,\n          notificationsCount\n        });\n      }\n    } catch (error) {\n      return;\n    }\n  }\n\n  componentDidMount() {\n    this.signal = true;\n    this.getNotifications();\n  }\n\n  componentWillUnmount() {\n    this.signal = false;\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          className = _this$props.className,\n          title = _this$props.title,\n          isSidebarOpen = _this$props.isSidebarOpen,\n          onToggleSidebar = _this$props.onToggleSidebar;\n    const _this$state = this.state,\n          notifications = _this$state.notifications,\n          notificationsCount = _this$state.notificationsCount,\n          notificationsEl = _this$state.notificationsEl;\n    const rootClassName = classNames(classes.root, className);\n    const showNotifications = Boolean(notificationsEl);\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: rootClassName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      className: classes.toolbar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      className: classes.menuButton,\n      onClick: onToggleSidebar,\n      variant: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, isSidebarOpen ? React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }) : React.createElement(MenuIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      className: classes.title,\n      variant: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, title), React.createElement(IconButton, {\n      className: classes.notificationsButton,\n      onClick: this.handleShowNotifications,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Badge, {\n      badgeContent: notificationsCount,\n      color: \"primary\",\n      variant: \"dot\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(NotificationsIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }))))), React.createElement(Popover, {\n      anchorEl: notificationsEl,\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"center\"\n      },\n      onClose: this.handleCloseNotifications,\n      open: showNotifications,\n      transformOrigin: {\n        vertical: \"top\",\n        horizontal: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(NotificationList, {\n      notifications: notifications,\n      onSelect: this.handleCloseNotifications,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })));\n  }\n\n}\n\nTopbar.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n  isSidebarOpen: PropTypes.bool,\n  onToggleSidebar: PropTypes.func,\n  title: PropTypes.string\n};\nTopbar.defaultProps = {\n  onToggleSidebar: () => {}\n};\nexport default compose(withRouter, withStyles(styles))(Topbar);","map":{"version":3,"sources":["/media/lambamansha/Seagate Expansion Drive/minorproject/src/layouts/Dashboard/components/Topbar/index.jsx"],"names":["React","Component","Fragment","withRouter","classNames","compose","PropTypes","withStyles","Badge","IconButton","Popover","Toolbar","Typography","Menu","MenuIcon","Close","CloseIcon","NotificationsOutlined","NotificationsIcon","Input","InputIcon","getNotifications","NotificationList","styles","Topbar","signal","state","notifications","notificationsLimit","notificationsCount","notificationsEl","handleSignOut","props","onLogOut","handleShowNotifications","event","setState","currentTarget","handleCloseNotifications","error","componentDidMount","componentWillUnmount","render","classes","className","title","isSidebarOpen","onToggleSidebar","rootClassName","root","showNotifications","Boolean","toolbar","menuButton","notificationsButton","vertical","horizontal","propTypes","string","object","isRequired","history","bool","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\n// Externals\nimport classNames from \"classnames\";\nimport compose from \"recompose/compose\";\nimport PropTypes from \"prop-types\";\n\n// Material helpers\nimport { withStyles } from \"@material-ui/styles\";\n\n// Material components\nimport {\n  Badge,\n  IconButton,\n  Popover,\n  Toolbar,\n  Typography\n} from \"@material-ui/core\";\n\n// Material icons\nimport {\n  Menu as MenuIcon,\n  Close as CloseIcon,\n  NotificationsOutlined as NotificationsIcon,\n  Input as InputIcon\n} from \"@material-ui/icons\";\n\n// Shared services\nimport { getNotifications } from \"services/notification\";\n\n// Custom components\nimport { NotificationList } from \"./components\";\n\n// Component styles\nimport styles from \"./styles\";\n\nclass Topbar extends Component {\n  signal = true;\n\n  state = {\n    notifications: [],\n    notificationsLimit: 4,\n    notificationsCount: 0,\n    notificationsEl: null\n  };\n\n  async getNotifications() {\n    try {\n      const { notificationsLimit } = this.state;\n\n      const { notifications, notificationsCount } = await getNotifications(\n        notificationsLimit\n      );\n\n      if (this.signal) {\n        this.setState({\n          notifications,\n          notificationsCount\n        });\n      }\n    } catch (error) {\n      return;\n    }\n  }\n\n  componentDidMount() {\n    this.signal = true;\n    this.getNotifications();\n  }\n\n  componentWillUnmount() {\n    this.signal = false;\n  }\n\n  handleSignOut = () => {\n    // const { history } = this.props;\n\n    // history.push('/sign-in');\n    this.props.onLogOut();\n  };\n\n  handleShowNotifications = event => {\n    this.setState({\n      notificationsEl: event.currentTarget\n    });\n  };\n\n  handleCloseNotifications = () => {\n    this.setState({\n      notificationsEl: null\n    });\n  };\n\n  render() {\n    const {\n      classes,\n      className,\n      title,\n      isSidebarOpen,\n      onToggleSidebar\n    } = this.props;\n    const { notifications, notificationsCount, notificationsEl } = this.state;\n\n    const rootClassName = classNames(classes.root, className);\n    const showNotifications = Boolean(notificationsEl);\n\n    return (\n      <Fragment>\n        <div className={rootClassName}>\n          <Toolbar className={classes.toolbar}>\n            <IconButton\n              className={classes.menuButton}\n              onClick={onToggleSidebar}\n              variant=\"text\"\n            >\n              {isSidebarOpen ? <CloseIcon /> : <MenuIcon />}\n            </IconButton>\n            <Typography className={classes.title} variant=\"h4\">\n              {title}\n            </Typography>\n            <IconButton\n              className={classes.notificationsButton}\n              onClick={this.handleShowNotifications}\n            >\n              <Badge\n                badgeContent={notificationsCount}\n                color=\"primary\"\n                variant=\"dot\"\n              >\n                <NotificationsIcon />\n              </Badge>\n            </IconButton>\n            {/* <IconButton\n\t\t\t\t\t\t\tclassName={classes.signOutButton}\n\t\t\t\t\t\t\tonClick={this.handleSignOut}>\n\t\t\t\t\t\t\t<InputIcon />\n\t\t\t\t\t\t</IconButton> */}\n          </Toolbar>\n        </div>\n        <Popover\n          anchorEl={notificationsEl}\n          anchorOrigin={{\n            vertical: \"bottom\",\n            horizontal: \"center\"\n          }}\n          onClose={this.handleCloseNotifications}\n          open={showNotifications}\n          transformOrigin={{\n            vertical: \"top\",\n            horizontal: \"center\"\n          }}\n        >\n          <NotificationList\n            notifications={notifications}\n            onSelect={this.handleCloseNotifications}\n          />\n        </Popover>\n      </Fragment>\n    );\n  }\n}\n\nTopbar.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n  isSidebarOpen: PropTypes.bool,\n  onToggleSidebar: PropTypes.func,\n  title: PropTypes.string\n};\n\nTopbar.defaultProps = {\n  onToggleSidebar: () => {}\n};\n\nexport default compose(\n  withRouter,\n  withStyles(styles)\n)(Topbar);\n"]},"metadata":{},"sourceType":"module"}