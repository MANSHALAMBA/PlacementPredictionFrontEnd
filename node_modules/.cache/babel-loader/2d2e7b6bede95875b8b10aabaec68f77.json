{"ast":null,"code":"import _objectSpread from \"/home/lambamansha/Desktop/faculty_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/lambamansha/Desktop/faculty_portal/src/views/ProjectList/components/CreateEvent/index.js\";\nimport React, { Component } from \"react\";\nimport Form from \"./Form/CreateEvent\";\nimport validate from \"validate.js\";\nimport moment from \"moment\";\nimport { isEmpty } from \"../helpers/helpers\";\nvalidate.extend(validate.validators.datetime, {\n  // The value is guaranteed not to be null or undefined but otherwise it\n  // could be anything.\n  parse: function (value, options) {\n    return +moment.utc(value);\n  },\n  // Input is a unix timestamp\n  format: function (value, options) {\n    var format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\";\n    return moment.utc(value).format(format);\n  }\n});\n\nclass CreateEvent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeHandler = e => {\n      const _e$target = e.target,\n            name = _e$target.name,\n            value = _e$target.value;\n      this.setState(prevState => {\n        return {\n          data: _objectSpread({}, prevState.data, {\n            [name]: value\n          }),\n          errors: _objectSpread({}, prevState.errors, {\n            [name]: []\n          })\n        };\n      });\n    };\n\n    this.onSubmitHandler = () => {\n      //validation\n      let errors = validate(this.state.data, {\n        eventname: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          }\n        },\n        startdate: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          },\n          datetime: {\n            earliest: moment.utc(),\n            message: \"cannot be in past\"\n          }\n        },\n        enddate: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          },\n          datetime: {\n            earliest: this.state.data.startdate,\n            message: \"cannot be before start date\"\n          }\n        },\n        facultygroup: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          }\n        },\n        projectgroup: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          }\n        }\n      }); // validation for parameters array\n\n      let paramErr = this.state.data.parameters.map(param => {\n        let error = {};\n\n        if (isEmpty(param.Name)) {\n          error.Name = \"*required\";\n        }\n\n        if (isEmpty(param.MaximumMarks)) {\n          error.MaximumMarks = \"*required\";\n        }\n\n        return Object.keys(error).length > 0 ? error : null;\n      }); // check for errors\n\n      if (paramErr.some(val => val !== null) && errors) {\n        this.setState(prevState => {\n          return {\n            data: _objectSpread({}, prevState.data),\n            errors: _objectSpread({}, prevState.errors, errors, {\n              parameters: paramErr\n            })\n          };\n        });\n      } else if (errors) {\n        this.setState({\n          errors\n        });\n      } else {\n        this.setState(prevState => {\n          return {\n            data: _objectSpread({}, prevState.data),\n            errors: _objectSpread({}, prevState.errors, {\n              parameters: paramErr\n            })\n          };\n        });\n      }\n    };\n\n    this.addParam = e => {\n      e.preventDefault();\n      let parameters = [...this.state.data.parameters];\n\n      if (parameters.length < 10) {\n        parameters.push({\n          Name: \"\",\n          MaximumMarks: null\n        });\n        this.setState({\n          data: _objectSpread({}, this.state.data, {\n            parameters\n          })\n        });\n      }\n    };\n\n    this.handleChangeParam = (e, idx) => {\n      e.preventDefault();\n      let parameters = [...this.state.data.parameters];\n      parameters[idx][e.target.name] = e.target.value;\n\n      let error = _objectSpread({}, this.state.errors);\n\n      if (error.parameters && error.parameters.length > idx) {\n        delete error.parameters[idx];\n      }\n\n      this.setState({\n        data: _objectSpread({}, this.state.data, {\n          parameters\n        }),\n        error\n      });\n    };\n\n    this.removeParam = (e, index) => {\n      e.preventDefault();\n      let parameters = [...this.state.data.parameters];\n\n      if (parameters.length > 1) {\n        parameters.splice(index, 1);\n        this.setState({\n          data: _objectSpread({}, this.state.data, {\n            parameters\n          })\n        });\n      }\n    };\n\n    this.state = {\n      data: {\n        eventname: \"\",\n        startdate: \"\",\n        enddate: \"\",\n        facultygroup: \"\",\n        projectgroup: \"\",\n        facultygroupslist: [\"a\", \"b\"],\n        projectgroupslist: [\"c\", \"d\"],\n        parameters: [{\n          Name: \"\",\n          MaximumMarks: null\n        }]\n      },\n      errors: {}\n    };\n  }\n\n  render() {\n    return React.createElement(Form, {\n      onChangeHandler: this.onChangeHandler,\n      onSubmit: this.onSubmitHandler,\n      errors: this.state.errors,\n      facultygroupslist: this.state.data.facultygroupslist,\n      facultygroup: this.state.data.facultygroup,\n      projectgroupslist: this.state.data.projectgroupslist,\n      projectgroup: this.state.data.projectgroup,\n      addParam: this.addParam,\n      parameters: this.state.data.parameters,\n      handleChangeParam: this.handleChangeParam,\n      removeParam: this.removeParam,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default CreateEvent;","map":{"version":3,"sources":["/home/lambamansha/Desktop/faculty_portal/src/views/ProjectList/components/CreateEvent/index.js"],"names":["React","Component","Form","validate","moment","isEmpty","extend","validators","datetime","parse","value","options","utc","format","dateOnly","CreateEvent","constructor","props","onChangeHandler","e","target","name","setState","prevState","data","errors","onSubmitHandler","state","eventname","presence","allowEmpty","message","startdate","earliest","enddate","facultygroup","projectgroup","paramErr","parameters","map","param","error","Name","MaximumMarks","Object","keys","length","some","val","addParam","preventDefault","push","handleChangeParam","idx","removeParam","index","splice","facultygroupslist","projectgroupslist","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Form from \"./Form/CreateEvent\";\nimport validate from \"validate.js\";\nimport moment from \"moment\";\nimport { isEmpty } from \"../helpers/helpers\";\n\nvalidate.extend(validate.validators.datetime, {\n  // The value is guaranteed not to be null or undefined but otherwise it\n  // could be anything.\n  parse: function(value, options) {\n    return +moment.utc(value);\n  },\n  // Input is a unix timestamp\n  format: function(value, options) {\n    var format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\";\n    return moment.utc(value).format(format);\n  }\n});\n\nclass CreateEvent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {\n        eventname: \"\",\n        startdate: \"\",\n        enddate: \"\",\n        facultygroup: \"\",\n        projectgroup: \"\",\n        facultygroupslist: [\"a\", \"b\"],\n        projectgroupslist: [\"c\", \"d\"],\n        parameters: [{ Name: \"\", MaximumMarks: null }]\n      },\n      errors: {}\n    };\n  }\n  onChangeHandler = e => {\n    const { name, value } = e.target;\n\n    this.setState(prevState => {\n      return {\n        data: {\n          ...prevState.data,\n          [name]: value\n        },\n        errors: {\n          ...prevState.errors,\n          [name]: []\n        }\n      };\n    });\n  };\n\n  onSubmitHandler = () => {\n    //validation\n    let errors = validate(this.state.data, {\n      eventname: { presence: { allowEmpty: false, message: \"is required\" } },\n      startdate: {\n        presence: { allowEmpty: false, message: \"is required\" },\n        datetime: {\n          earliest: moment.utc(),\n          message: \"cannot be in past\"\n        }\n      },\n      enddate: {\n        presence: { allowEmpty: false, message: \"is required\" },\n        datetime: {\n          earliest: this.state.data.startdate,\n          message: \"cannot be before start date\"\n        }\n      },\n      facultygroup: { presence: { allowEmpty: false, message: \"is required\" } },\n      projectgroup: { presence: { allowEmpty: false, message: \"is required\" } }\n    });\n\n    // validation for parameters array\n    let paramErr = this.state.data.parameters.map(param => {\n      let error = {};\n\n      if (isEmpty(param.Name)) {\n        error.Name = \"*required\";\n      }\n      if (isEmpty(param.MaximumMarks)) {\n        error.MaximumMarks = \"*required\";\n      }\n\n      return Object.keys(error).length > 0 ? error : null;\n    });\n\n    // check for errors\n    if (paramErr.some(val => val !== null) && errors) {\n      this.setState(prevState => {\n        return {\n          data: {\n            ...prevState.data\n          },\n\n          errors: {\n            ...prevState.errors,\n            ...errors,\n            parameters: paramErr\n          }\n        };\n      });\n    } else if (errors) {\n      this.setState({ errors });\n    } else {\n      this.setState(prevState => {\n        return {\n          data: {\n            ...prevState.data\n          },\n\n          errors: {\n            ...prevState.errors,\n\n            parameters: paramErr\n          }\n        };\n      });\n    }\n  };\n\n  addParam = e => {\n    e.preventDefault();\n\n    let parameters = [...this.state.data.parameters];\n\n    if (parameters.length < 10) {\n      parameters.push({ Name: \"\", MaximumMarks: null });\n      this.setState({ data: { ...this.state.data, parameters } });\n    }\n  };\n\n  handleChangeParam = (e, idx) => {\n    e.preventDefault();\n\n    let parameters = [...this.state.data.parameters];\n    parameters[idx][e.target.name] = e.target.value;\n\n    let error = { ...this.state.errors };\n\n    if (error.parameters && error.parameters.length > idx) {\n      delete error.parameters[idx];\n    }\n\n    this.setState({ data: { ...this.state.data, parameters }, error });\n  };\n\n  removeParam = (e, index) => {\n    e.preventDefault();\n\n    let parameters = [...this.state.data.parameters];\n    if (parameters.length > 1) {\n      parameters.splice(index, 1);\n      this.setState({ data: { ...this.state.data, parameters } });\n    }\n  };\n\n  render() {\n    return (\n      <Form\n        onChangeHandler={this.onChangeHandler}\n        onSubmit={this.onSubmitHandler}\n        errors={this.state.errors}\n        facultygroupslist={this.state.data.facultygroupslist}\n        facultygroup={this.state.data.facultygroup}\n        projectgroupslist={this.state.data.projectgroupslist}\n        projectgroup={this.state.data.projectgroup}\n        addParam={this.addParam}\n        parameters={this.state.data.parameters}\n        handleChangeParam={this.handleChangeParam}\n        removeParam={this.removeParam}\n      />\n    );\n  }\n}\n\nexport default CreateEvent;\n"]},"metadata":{},"sourceType":"module"}