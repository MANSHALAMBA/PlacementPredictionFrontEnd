{"ast":null,"code":"var _jsxFileName = \"/home/lambamansha/Desktop/minorproject/src/views/ProjectList/index.jsx\";\nimport React, { Component } from \"react\";\nimport { Dashboard as DashboardLayout } from \"layouts\";\nimport ProjectToolbar from \"./components/ProjectToolbar\";\nimport MaterialTable from \"material-table\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ViewIcon from \"@material-ui/icons/Visibility\";\nimport { Loader } from \"components\";\nimport { connect } from \"react-redux\";\nimport { APTITUDE } from \"../../constants\";\nimport { Route, Switch, Redirect } from \"react-router-dom\"; // styles\n\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { loadProjectList } from \"api/projects\";\nimport { Project } from \"serializers/projects\";\nimport CreateEvent from \"./components/CreateEvent\";\nimport Milestone from \"./components/Milestone\";\nimport Projectgroup from \"./components/Projectgroup\";\nimport swal from \"sweetalert\";\nimport { Typography } from \"@material-ui/core\";\n\nclass ProjectList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: [1, 2, 3, 4, 5, 6, 7, 8, 0],\n      size: 3\n    };\n  }\n\n  newGame(size) {\n    let board = new Array(size * size);\n\n    for (let i = 0; i < size * size; ++i) board[i] = i;\n\n    board = this.shuffle(board);\n    this.updateBoard(board, size);\n    this.setState({\n      size: size\n    });\n  }\n\n  updateBoard(board, size) {\n    this.setState({\n      board: board\n    });\n  }\n\n  shuffle(o) {\n    const temp = o.slice();\n\n    for (var j, x, i = temp.length; i; j = Math.floor(Math.random() * i), x = temp[--i], temp[i] = temp[j], temp[j] = x);\n\n    return temp;\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(DashboardLayout, {\n      mode: APTITUDE,\n      title: \"APTITUDE\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"puzzle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"React puzzle game\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Click on the squares to move them (only those next to the 0 square)\"), this.state && this.state.board ? React.createElement(Board, {\n      size: this.state.size,\n      board: this.state.board,\n      updateBoard: this.updateBoard.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }) : null, React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"New 3x3 game\",\n      onClick: this.newGame.bind(this, 3),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"New 4x4 game\",\n      onClick: this.newGame.bind(this, 4),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"New 5x5 game\",\n      onClick: this.newGame.bind(this, 5),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStatetoProps = state => {\n  return {\n    token: state.auth.token,\n    projectlistTabledata: state.project.projectlistTabledata\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    pushProjectListdata: data => dispatch({\n      type: \"PUSH PROJECTLIST DATA\",\n      data: data\n    })\n  };\n};\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(withStyles(styles)(ProjectList));","map":{"version":3,"sources":["/home/lambamansha/Desktop/minorproject/src/views/ProjectList/index.jsx"],"names":["React","Component","Dashboard","DashboardLayout","ProjectToolbar","MaterialTable","IconButton","ViewIcon","Loader","connect","APTITUDE","Route","Switch","Redirect","styles","withStyles","loadProjectList","Project","CreateEvent","Milestone","Projectgroup","swal","Typography","ProjectList","constructor","props","state","board","size","newGame","Array","i","shuffle","updateBoard","setState","o","temp","slice","j","x","length","Math","floor","random","render","classes","bind","mapStatetoProps","token","auth","projectlistTabledata","project","mapDispatchToProps","dispatch","pushProjectListdata","data","type"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Dashboard as DashboardLayout } from \"layouts\";\n\nimport ProjectToolbar from \"./components/ProjectToolbar\";\nimport MaterialTable from \"material-table\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ViewIcon from \"@material-ui/icons/Visibility\";\nimport { Loader } from \"components\";\nimport { connect } from \"react-redux\";\nimport { APTITUDE } from \"../../constants\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n// styles\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { loadProjectList } from \"api/projects\";\nimport { Project } from \"serializers/projects\";\nimport CreateEvent from \"./components/CreateEvent\";\nimport Milestone from \"./components/Milestone\";\nimport Projectgroup from \"./components/Projectgroup\";\nimport swal from \"sweetalert\";\nimport { Typography } from \"@material-ui/core\";\nclass ProjectList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { board: [1, 2, 3, 4, 5, 6, 7, 8, 0], size: 3 };\n  }\n  newGame(size) {\n    let board = new Array(size * size);\n    for (let i = 0; i < size * size; ++i) board[i] = i;\n    board = this.shuffle(board);\n    this.updateBoard(board, size);\n    this.setState({ size: size });\n  }\n  updateBoard(board, size) {\n    this.setState({ board: board });\n  }\n  shuffle(o) {\n    const temp = o.slice();\n    for (\n      var j, x, i = temp.length;\n      i;\n      j = Math.floor(Math.random() * i),\n        x = temp[--i],\n        temp[i] = temp[j],\n        temp[j] = x\n    );\n    return temp;\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <DashboardLayout mode={APTITUDE} title=\"APTITUDE\">\n        <div className=\"puzzle\">\n          <h1>React puzzle game</h1>\n          <p>\n            Click on the squares to move them (only those next to the 0 square)\n          </p>\n          {this.state && this.state.board ? (\n            <Board\n              size={this.state.size}\n              board={this.state.board}\n              updateBoard={this.updateBoard.bind(this)}\n            />\n          ) : null}\n          <input\n            type=\"submit\"\n            value=\"New 3x3 game\"\n            onClick={this.newGame.bind(this, 3)}\n          />\n          <input\n            type=\"submit\"\n            value=\"New 4x4 game\"\n            onClick={this.newGame.bind(this, 4)}\n          />\n          <input\n            type=\"submit\"\n            value=\"New 5x5 game\"\n            onClick={this.newGame.bind(this, 5)}\n          />\n        </div>\n      </DashboardLayout>\n    );\n  }\n}\n\nconst mapStatetoProps = state => {\n  return {\n    token: state.auth.token,\n    projectlistTabledata: state.project.projectlistTabledata\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    pushProjectListdata: data =>\n      dispatch({ type: \"PUSH PROJECTLIST DATA\", data: data })\n  };\n};\n\nexport default connect(\n  mapStatetoProps,\n  mapDispatchToProps\n)(withStyles(styles)(ProjectList));\n"]},"metadata":{},"sourceType":"module"}