{"ast":null,"code":"var _jsxFileName = \"/home/lambamansha/Desktop/faculty_portal/src/views/Quiz/components/EditQuiz/components/Visualization/components/BySkillSet/index.jsx\";\nimport React, { PureComponent } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\nimport palette from \"theme/palette\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Portlet, PortletHeader, PortletLabel, PortletToolbar, PortletContent } from \"components\";\n\nclass BySkillSet extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = BySkillSet.getVisualizationData(props.questions, props.skills);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    //check if props.questions has changed\n    let data = BySkillSet.getVisualizationData(props.questions, props.skills);\n\n    if (data === state.skillsByPercent) {\n      return null;\n    } else {\n      return data;\n    }\n  }\n\n  render() {\n    let data = {\n      datasets: [{\n        data: [...this.state.skillsByPercent],\n        backgroundColor: [palette.primary.main, palette.danger.main, palette.warning.main],\n        borderWidth: 8,\n        borderColor: palette.common.white,\n        hoverBorderColor: palette.common.white\n      }],\n      labels: [...this.props.skills]\n    };\n    let options = {\n      legend: {\n        display: false\n      },\n      responsive: true,\n      maintainAspectRatio: false,\n      animation: false,\n      cutoutPercentage: 80,\n      layout: {\n        padding: 0\n      },\n      tooltips: {\n        enabled: true,\n        mode: \"index\",\n        intersect: false,\n        borderWidth: 1,\n        borderColor: palette.border,\n        backgroundColor: palette.common.white,\n        titleFontColor: palette.text.primary,\n        bodyFontColor: palette.text.secondary,\n        footerFontColor: palette.text.secondary\n      }\n    };\n    return React.createElement(\"div\", {\n      className: this.props.classes.chartWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Portlet, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(PortletHeader, {\n      noDivider: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(PortletLabel, {\n      title: \"Questions By Skills Set\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })), React.createElement(PortletContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Pie, {\n      data: data,\n      options: options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: this.props.classes.stats,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, this.state.skillsByPercent.map((skillpercent, index) => {\n      return React.createElement(\"div\", {\n        className: this.props.classes.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, this.props.skills[index]), React.createElement(Typography, {\n        style: {\n          color: data.datasets[0].backgroundColor[index]\n        },\n        variant: \"h4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, skillpercent.toFixed(2), \"%\"));\n    }), skillpercent.toFixed(2), \"%\"))));\n  }\n\n}\n\nBySkillSet.getVisualizationData = (questions, quizskills) => {\n  let numberOfquestions = questions.length;\n  let lengthofquizskills = quizskills.length; // let skillsByPercent = new Array(lengthofquizskills);\n\n  let skillsByPercent = [];\n\n  for (var i = 0; i < lengthofquizskills; i++) {\n    skillsByPercent.push(0);\n  } // skillsByPercent = skillsByPercent.map(skillpercent => {\n  // \tskillpercent = 0;\n  // \treturn skillpercent;\n  // });\n\n\n  questions.map(question => {\n    question.skills.map(skill => {\n      let index = quizskills.indexOf(skill);\n      ++skillsByPercent[index];\n    });\n  });\n  skillsByPercent = skillsByPercent.map(skillpercent => {\n    skillpercent = skillpercent / numberOfquestions * 100;\n    return skillpercent;\n  });\n  return {\n    skillsByPercent\n  };\n};\n\nexport default withStyles(styles)(BySkillSet);","map":{"version":3,"sources":["/home/lambamansha/Desktop/faculty_portal/src/views/Quiz/components/EditQuiz/components/Visualization/components/BySkillSet/index.jsx"],"names":["React","PureComponent","Pie","styles","withStyles","palette","Typography","Grid","Portlet","PortletHeader","PortletLabel","PortletToolbar","PortletContent","BySkillSet","constructor","props","state","getVisualizationData","questions","skills","getDerivedStateFromProps","data","skillsByPercent","render","datasets","backgroundColor","primary","main","danger","warning","borderWidth","borderColor","common","white","hoverBorderColor","labels","options","legend","display","responsive","maintainAspectRatio","animation","cutoutPercentage","layout","padding","tooltips","enabled","mode","intersect","border","titleFontColor","text","bodyFontColor","secondary","footerFontColor","classes","chartWrapper","stats","map","skillpercent","index","label","color","toFixed","quizskills","numberOfquestions","length","lengthofquizskills","i","push","question","skill","indexOf"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\nimport palette from \"theme/palette\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n\tPortlet,\n\tPortletHeader,\n\tPortletLabel,\n\tPortletToolbar,\n\tPortletContent\n} from \"components\";\nclass BySkillSet extends PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = BySkillSet.getVisualizationData(props.questions, props.skills);\n\t}\n\tstatic getVisualizationData = (questions, quizskills) => {\n\t\tlet numberOfquestions = questions.length;\n\t\tlet lengthofquizskills = quizskills.length;\n\n\t\t// let skillsByPercent = new Array(lengthofquizskills);\n\t\tlet skillsByPercent = [];\n\t\tfor (var i = 0; i < lengthofquizskills; i++) {\n\t\t\tskillsByPercent.push(0);\n\t\t}\n\n\t\t// skillsByPercent = skillsByPercent.map(skillpercent => {\n\t\t// \tskillpercent = 0;\n\t\t// \treturn skillpercent;\n\t\t// });\n\n\t\tquestions.map(question => {\n\t\t\tquestion.skills.map(skill => {\n\t\t\t\tlet index = quizskills.indexOf(skill);\n\t\t\t\t++skillsByPercent[index];\n\t\t\t});\n\t\t});\n\n\t\tskillsByPercent = skillsByPercent.map(skillpercent => {\n\t\t\tskillpercent = (skillpercent / numberOfquestions) * 100;\n\t\t\treturn skillpercent;\n\t\t});\n\n\t\treturn {\n\t\t\tskillsByPercent\n\t\t};\n\t};\n\n\tstatic getDerivedStateFromProps(props, state) {\n\t\t//check if props.questions has changed\n\t\tlet data = BySkillSet.getVisualizationData(props.questions, props.skills);\n\t\tif (data === state.skillsByPercent) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn data;\n\t\t}\n\t}\n\n\trender() {\n\t\tlet data = {\n\t\t\tdatasets: [\n\t\t\t\t{\n\t\t\t\t\tdata: [...this.state.skillsByPercent],\n\t\t\t\t\tbackgroundColor: [\n\t\t\t\t\t\tpalette.primary.main,\n\t\t\t\t\t\tpalette.danger.main,\n\t\t\t\t\t\tpalette.warning.main\n\t\t\t\t\t],\n\t\t\t\t\tborderWidth: 8,\n\t\t\t\t\tborderColor: palette.common.white,\n\t\t\t\t\thoverBorderColor: palette.common.white\n\t\t\t\t}\n\t\t\t],\n\t\t\tlabels: [...this.props.skills]\n\t\t};\n\n\t\tlet options = {\n\t\t\tlegend: {\n\t\t\t\tdisplay: false\n\t\t\t},\n\t\t\tresponsive: true,\n\t\t\tmaintainAspectRatio: false,\n\t\t\tanimation: false,\n\t\t\tcutoutPercentage: 80,\n\t\t\tlayout: { padding: 0 },\n\t\t\ttooltips: {\n\t\t\t\tenabled: true,\n\t\t\t\tmode: \"index\",\n\t\t\t\tintersect: false,\n\t\t\t\tborderWidth: 1,\n\t\t\t\tborderColor: palette.border,\n\t\t\t\tbackgroundColor: palette.common.white,\n\t\t\t\ttitleFontColor: palette.text.primary,\n\t\t\t\tbodyFontColor: palette.text.secondary,\n\t\t\t\tfooterFontColor: palette.text.secondary\n\t\t\t}\n\t\t};\n\t\treturn (\n\t\t\t<div className={this.props.classes.chartWrapper}>\n\t\t\t\t<Portlet>\n\t\t\t\t\t<PortletHeader noDivider>\n\t\t\t\t\t\t<PortletLabel title=\"Questions By Skills Set\" />\n\t\t\t\t\t</PortletHeader>\n\t\t\t\t\t<PortletContent>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Pie data={data} options={options} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className={this.props.classes.stats}>\n\t\t\t\t\t\t\t{this.state.skillsByPercent.map((skillpercent, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div className={this.props.classes.label}>\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"body1\">\n\t\t\t\t\t\t\t\t\t\t\t{this.props.skills[index]}\n\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t\t<Typography\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ color: data.datasets[0].backgroundColor[index] }}\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"h4\">\n\t\t\t\t\t\t\t\t\t\t\t{skillpercent.toFixed(2)}%\n\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t{skillpercent.toFixed(2)}%\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</PortletContent>\n\t\t\t\t</Portlet>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withStyles(styles)(BySkillSet);\n"]},"metadata":{},"sourceType":"module"}