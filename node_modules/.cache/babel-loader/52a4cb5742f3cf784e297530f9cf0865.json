{"ast":null,"code":"var _jsxFileName = \"/home/lambamansha/Desktop/faculty_portal/src/views/Project/index.jsx\";\nimport React, { Component } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport compose from \"recompose/compose\";\nimport { Dashboard as DashboardLayout } from \"layouts\";\nimport { PROJECT } from \"../../constants\";\nimport { connect } from \"react-redux\";\nimport { Loader } from \"components\";\nimport { fetchProjectdata } from \"api/projects\";\nimport { Project } from \"serializers/projects\";\nimport { OverviewTab, ChatTab, TeamTab, MilestonesTab, ReviewsTab } from \"./components\"; // styles\n\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\n\nclass project extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    // check for project in redux\n    let outcome = \"FAILURE\";\n    this.props.projectlist.forEach(element => {\n      if (element.id = this.props.match.params.projectId) {\n        outcome = \"SUCCESS\";\n      }\n    });\n\n    if (outcome === \"SUCCESS\") {\n      this.setState({\n        isLoading: false\n      });\n    } else if (outcome === \"FAILURE\") {\n      fetchProjectdata(this.props.token, this.props.match.params.projectId).then(data => {\n        this.props.pushProjecttoProjectList(new Project(data.project));\n        this.setState({\n          isLoading: false\n        });\n      }).catch(data => {// console.log(data);\n      });\n    }\n  }\n\n  render() {\n    // const { classes } = this.props;\n    return React.createElement(DashboardLayout, {\n      mode: PROJECT,\n      title: \"Project\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.state.isLoading && React.createElement(Route, {\n      component: Loader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/project/:projectId/overview\",\n      component: OverviewTab,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/project/:projectId/chat\",\n      component: ChatTab,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/project/:projectId/milestones\",\n      component: MilestonesTab,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/project/:projectId/team\",\n      component: TeamTab,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/project/:projectId/reviews\",\n      component: ReviewsTab,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(Redirect, {\n      to: \"/project/:projectId/overview\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    checkForCurrentProject: projectId => dispatch({\n      type: \"CHECK FOR CURRENT PROJECT\",\n      projectId: projectId\n    }),\n    pushProjecttoProjectList: project => dispatch({\n      type: \"PUSH PROJECT TO PROJECT LIST\",\n      project: project\n    })\n  };\n};\n\nconst mapStatetoProps = state => {\n  return {\n    token: state.auth.token,\n    projectlist: state.project.projectlistTabledata\n  };\n};\n\nexport default compose(connect(mapStatetoProps, mapDispatchToProps), withStyles(styles))(project); // isloading true\n// check for project in redux\n// if found isloading false\n// if not found fetch project and push to redux project list , set isloading false","map":{"version":3,"sources":["/home/lambamansha/Desktop/faculty_portal/src/views/Project/index.jsx"],"names":["React","Component","Route","Switch","Redirect","compose","Dashboard","DashboardLayout","PROJECT","connect","Loader","fetchProjectdata","Project","OverviewTab","ChatTab","TeamTab","MilestonesTab","ReviewsTab","styles","withStyles","project","constructor","props","state","isLoading","componentDidMount","outcome","projectlist","forEach","element","id","match","params","projectId","setState","token","then","data","pushProjecttoProjectList","catch","render","mapDispatchToProps","dispatch","checkForCurrentProject","type","mapStatetoProps","auth","projectlistTabledata"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport compose from \"recompose/compose\";\n\nimport { Dashboard as DashboardLayout } from \"layouts\";\nimport { PROJECT } from \"../../constants\";\nimport { connect } from \"react-redux\";\nimport { Loader } from \"components\";\nimport { fetchProjectdata } from \"api/projects\";\nimport { Project } from \"serializers/projects\";\nimport {\n\tOverviewTab,\n\tChatTab,\n\tTeamTab,\n\tMilestonesTab,\n\tReviewsTab\n} from \"./components\";\n\n// styles\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\n\nclass project extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisLoading: true\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\t// check for project in redux\n\t\tlet outcome = \"FAILURE\";\n\t\tthis.props.projectlist.forEach(element => {\n\t\t\tif ((element.id = this.props.match.params.projectId)) {\n\t\t\t\toutcome = \"SUCCESS\";\n\t\t\t}\n\t\t});\n\n\t\tif (outcome === \"SUCCESS\") {\n\t\t\tthis.setState({\n\t\t\t\tisLoading: false\n\t\t\t});\n\t\t} else if (outcome === \"FAILURE\") {\n\t\t\tfetchProjectdata(this.props.token, this.props.match.params.projectId)\n\t\t\t\t.then(data => {\n\t\t\t\t\tthis.props.pushProjecttoProjectList(new Project(data.project));\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoading: false\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(data => {\n\t\t\t\t\t// console.log(data);\n\t\t\t\t});\n\t\t}\n\t}\n\trender() {\n\t\t// const { classes } = this.props;\n\n\t\treturn (\n\t\t\t<DashboardLayout mode={PROJECT} title=\"Project\">\n\t\t\t\t<Switch>\n\t\t\t\t\t{this.state.isLoading && <Route component={Loader} />}\n\t\t\t\t\t<Route\n\t\t\t\t\t\texact\n\t\t\t\t\t\tpath=\"/project/:projectId/overview\"\n\t\t\t\t\t\tcomponent={OverviewTab}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route exact path=\"/project/:projectId/chat\" component={ChatTab} />\n\t\t\t\t\t<Route\n\t\t\t\t\t\texact\n\t\t\t\t\t\tpath=\"/project/:projectId/milestones\"\n\t\t\t\t\t\tcomponent={MilestonesTab}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route exact path=\"/project/:projectId/team\" component={TeamTab} />\n\t\t\t\t\t<Route\n\t\t\t\t\t\texact\n\t\t\t\t\t\tpath=\"/project/:projectId/reviews\"\n\t\t\t\t\t\tcomponent={ReviewsTab}\n\t\t\t\t\t/>\n\t\t\t\t\t<Redirect to=\"/project/:projectId/overview\" />\n\t\t\t\t</Switch>\n\t\t\t</DashboardLayout>\n\t\t);\n\t}\n}\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tcheckForCurrentProject: projectId =>\n\t\t\tdispatch({\n\t\t\t\ttype: \"CHECK FOR CURRENT PROJECT\",\n\t\t\t\tprojectId: projectId\n\t\t\t}),\n\t\tpushProjecttoProjectList: project =>\n\t\t\tdispatch({\n\t\t\t\ttype: \"PUSH PROJECT TO PROJECT LIST\",\n\t\t\t\tproject: project\n\t\t\t})\n\t};\n};\nconst mapStatetoProps = state => {\n\treturn {\n\t\ttoken: state.auth.token,\n\t\tprojectlist: state.project.projectlistTabledata\n\t};\n};\n\nexport default compose(\n\tconnect(\n\t\tmapStatetoProps,\n\t\tmapDispatchToProps\n\t),\n\twithStyles(styles)\n)(project);\n\n// isloading true\n// check for project in redux\n// if found isloading false\n// if not found fetch project and push to redux project list , set isloading false\n"]},"metadata":{},"sourceType":"module"}