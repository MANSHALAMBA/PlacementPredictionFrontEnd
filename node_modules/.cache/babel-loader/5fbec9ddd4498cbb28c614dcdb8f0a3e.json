{"ast":null,"code":"var _jsxFileName = \"/home/lambamansha/Desktop/minorproject/src/views/PuzzleGame/index.jsx\";\nimport React, { Component } from \"react\";\nimport { Dashboard as DashboardLayout } from \"layouts\";\nimport { connect } from \"react-redux\";\nimport { APTITUDE } from \"../../constants\"; // styles\n\nimport styles from \"./styles\";\nimport style from \"./style.module.css\";\nimport { withStyles } from \"@material-ui/styles\";\nimport swal from \"sweetalert\";\nimport { Typography } from \"@material-ui/core\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nclass Cell extends Component {\n  render() {\n    const cls = this.props.value;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, cls == 0 ? React.createElement(\"span\", {\n      className: style.squarezero,\n      onClick: () => this.props.clickHandler(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, this.props.value) : React.createElement(\"span\", {\n      className: style.square,\n      onClick: () => this.props.clickHandler(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, this.props.value));\n  }\n\n}\n\nclass Board extends Component {\n  componentWillMount() {\n    this.findClickables(this.props.board, this.props.size);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.findClickables(nextProps.board, nextProps.size);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    const curr = this.props.board.join(\"\");\n    const next = nextProps.board.join(\"\");\n    return curr !== next;\n  }\n\n  findClickables(board, size) {\n    const zeroIndex = board.indexOf(0);\n    const zeroCoordinate = this.getCoordFromIndex(zeroIndex, size);\n    const possibleTopIdx = zeroCoordinate.row > 0 ? this.getIndexFromCoord(zeroCoordinate.row - 1, zeroCoordinate.column, size) : null;\n    const possiblRightIdx = zeroCoordinate.column < size ? this.getIndexFromCoord(zeroCoordinate.row, zeroCoordinate.column + 1, size) : null;\n    const possiblBottomIdx = zeroCoordinate.row < size ? this.getIndexFromCoord(zeroCoordinate.row + 1, zeroCoordinate.column, size) : null;\n    const possibleLeftIdx = zeroCoordinate.column > 0 ? this.getIndexFromCoord(zeroCoordinate.row, zeroCoordinate.column - 1, size) : null;\n    this.setState({\n      zero: zeroIndex,\n      possibleTopIdx: possibleTopIdx,\n      possiblRightIdx: possiblRightIdx,\n      possiblBottomIdx: possiblBottomIdx,\n      possibleLeftIdx: possibleLeftIdx\n    });\n  }\n\n  getCoordFromIndex(idx, size) {\n    return {\n      row: Math.floor(idx / size) + 1,\n      column: idx % size + 1\n    };\n  }\n\n  getIndexFromCoord(row, col, size) {\n    return size * (row - 1) + col - 1;\n  }\n\n  cellClickHandler(index) {\n    if (index === this.state.possibleTopIdx || index === this.state.possiblRightIdx || index === this.state.possiblBottomIdx || index === this.state.possibleLeftIdx) this.nextBoard(index);\n  }\n\n  nextBoard(index, direction) {\n    const board = this.props.board.slice();\n    const temp = board[index];\n    board[index] = board[this.state.zero];\n    board[this.state.zero] = temp;\n    this.props.updateBoard(board);\n  }\n\n  render() {\n    const squares = this.props.board.map((val, index) => {\n      if ((index + 1) % this.props.size === 0) {\n        return React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: style.blocks,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(Cell, {\n          value: val,\n          clickHandler: this.cellClickHandler.bind(this, index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        })), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        className: style.blocks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(Cell, {\n        value: val,\n        clickHandler: this.cellClickHandler.bind(this, index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }));\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, squares);\n  }\n\n}\n\nclass PuzzleGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: [1, 2, 3, 4, 5, 6, 7, 8, 0],\n      size: 3\n    };\n  }\n\n  newGame(size) {\n    let board = new Array(size * size);\n\n    for (let i = 0; i < size * size; ++i) board[i] = i;\n\n    board = this.shuffle(board);\n    this.updateBoard(board, size);\n    this.setState({\n      size: size\n    });\n  }\n\n  updateBoard(board, size) {\n    this.setState({\n      board: board\n    });\n  }\n\n  shuffle(o) {\n    const temp = o.slice();\n\n    for (var j, x, i = temp.length; i; j = Math.floor(Math.random() * i), x = temp[--i], temp[i] = temp[j], temp[j] = x);\n\n    return temp;\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(DashboardLayout, {\n      mode: APTITUDE,\n      title: \"APTITUDE\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.root,\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: style.puzzle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"React puzzle game\"), React.createElement(Typography, {\n      variant: \"subtitle1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Click on the squares to move them (only those next to the 0 square)\"), React.createElement(ExpansionPanel, {\n      style: {\n        backgroundColor: \"#c6cbef\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(ExpansionPanelSummary, {\n      expandIcon: React.createElement(ExpandMoreIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }),\n      \"aria-controls\": \"panel1a-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Rules\")), React.createElement(ExpansionPanelDetails, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"A.Only the cells adjacent to zero can be moved .\"), \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \" \", \"B.Goal is to arrange all the numbers in sequential order.\"), \" \", React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \" \", \"C.Lesser is the number of moves more is the score .\"), \" \", React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"D.Larger is the size of board , more is the score player attains on achieving goal state.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), this.state && this.state.board ? React.createElement(\"div\", {\n      className: style.blocks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(Board, {\n      size: this.state.size,\n      board: this.state.board,\n      updateBoard: this.updateBoard.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    })) : null, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"New 3x3 game\",\n      onClick: this.newGame.bind(this, 3),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"New 4x4 game\",\n      onClick: this.newGame.bind(this, 4),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"New 5x5 game\",\n      onClick: this.newGame.bind(this, 5),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst mapStatetoProps = state => {\n  return {\n    token: state.auth.token,\n    projectlistTabledata: state.project.projectlistTabledata\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    pushProjectListdata: data => dispatch({\n      type: \"PUSH PROJECTLIST DATA\",\n      data: data\n    })\n  };\n};\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(withStyles(styles)(PuzzleGame));","map":{"version":3,"sources":["/home/lambamansha/Desktop/minorproject/src/views/PuzzleGame/index.jsx"],"names":["React","Component","Dashboard","DashboardLayout","connect","APTITUDE","styles","style","withStyles","swal","Typography","ExpansionPanel","ExpansionPanelSummary","ExpansionPanelDetails","ExpandMoreIcon","Cell","render","cls","props","value","squarezero","clickHandler","square","Board","componentWillMount","findClickables","board","size","componentWillReceiveProps","nextProps","shouldComponentUpdate","curr","join","next","zeroIndex","indexOf","zeroCoordinate","getCoordFromIndex","possibleTopIdx","row","getIndexFromCoord","column","possiblRightIdx","possiblBottomIdx","possibleLeftIdx","setState","zero","idx","Math","floor","col","cellClickHandler","index","state","nextBoard","direction","slice","temp","updateBoard","squares","map","val","blocks","bind","PuzzleGame","constructor","newGame","Array","i","shuffle","o","j","x","length","random","classes","root","textAlign","puzzle","backgroundColor","mapStatetoProps","token","auth","projectlistTabledata","project","mapDispatchToProps","dispatch","pushProjectListdata","data","type"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Dashboard as DashboardLayout } from \"layouts\";\n\nimport { connect } from \"react-redux\";\nimport { APTITUDE } from \"../../constants\";\n\n// styles\nimport styles from \"./styles\";\nimport style from \"./style.module.css\";\nimport { withStyles } from \"@material-ui/styles\";\n\nimport swal from \"sweetalert\";\nimport { Typography } from \"@material-ui/core\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nclass Cell extends Component {\n  render() {\n    const cls = this.props.value;\n    return (\n      <div>\n        {cls == 0 ? (\n          <span\n            className={style.squarezero}\n            onClick={() => this.props.clickHandler()}\n          >\n            {this.props.value}\n          </span>\n        ) : (\n          <span\n            className={style.square}\n            onClick={() => this.props.clickHandler()}\n          >\n            {this.props.value}\n          </span>\n        )}\n      </div>\n    );\n  }\n}\n\nclass Board extends Component {\n  componentWillMount() {\n    this.findClickables(this.props.board, this.props.size);\n  }\n  componentWillReceiveProps(nextProps) {\n    this.findClickables(nextProps.board, nextProps.size);\n  }\n  shouldComponentUpdate(nextProps) {\n    const curr = this.props.board.join(\"\");\n    const next = nextProps.board.join(\"\");\n    return curr !== next;\n  }\n\n  findClickables(board, size) {\n    const zeroIndex = board.indexOf(0);\n    const zeroCoordinate = this.getCoordFromIndex(zeroIndex, size);\n    const possibleTopIdx =\n      zeroCoordinate.row > 0\n        ? this.getIndexFromCoord(\n            zeroCoordinate.row - 1,\n            zeroCoordinate.column,\n            size\n          )\n        : null;\n    const possiblRightIdx =\n      zeroCoordinate.column < size\n        ? this.getIndexFromCoord(\n            zeroCoordinate.row,\n            zeroCoordinate.column + 1,\n            size\n          )\n        : null;\n    const possiblBottomIdx =\n      zeroCoordinate.row < size\n        ? this.getIndexFromCoord(\n            zeroCoordinate.row + 1,\n            zeroCoordinate.column,\n            size\n          )\n        : null;\n    const possibleLeftIdx =\n      zeroCoordinate.column > 0\n        ? this.getIndexFromCoord(\n            zeroCoordinate.row,\n            zeroCoordinate.column - 1,\n            size\n          )\n        : null;\n\n    this.setState({\n      zero: zeroIndex,\n      possibleTopIdx: possibleTopIdx,\n      possiblRightIdx: possiblRightIdx,\n      possiblBottomIdx: possiblBottomIdx,\n      possibleLeftIdx: possibleLeftIdx\n    });\n  }\n  getCoordFromIndex(idx, size) {\n    return { row: Math.floor(idx / size) + 1, column: (idx % size) + 1 };\n  }\n  getIndexFromCoord(row, col, size) {\n    return size * (row - 1) + col - 1;\n  }\n  cellClickHandler(index) {\n    if (\n      index === this.state.possibleTopIdx ||\n      index === this.state.possiblRightIdx ||\n      index === this.state.possiblBottomIdx ||\n      index === this.state.possibleLeftIdx\n    )\n      this.nextBoard(index);\n  }\n  nextBoard(index, direction) {\n    const board = this.props.board.slice();\n    const temp = board[index];\n    board[index] = board[this.state.zero];\n    board[this.state.zero] = temp;\n    this.props.updateBoard(board);\n  }\n  render() {\n    const squares = this.props.board.map((val, index) => {\n      if ((index + 1) % this.props.size === 0) {\n        return (\n          <span>\n            {\n              <div className={style.blocks}>\n                <Cell\n                  value={val}\n                  clickHandler={this.cellClickHandler.bind(this, index)}\n                />\n              </div>\n            }\n            <br />\n          </span>\n        );\n      }\n      return (\n        <div className={style.blocks}>\n          <Cell\n            value={val}\n            clickHandler={this.cellClickHandler.bind(this, index)}\n          />\n        </div>\n      );\n    });\n    return <div>{squares}</div>;\n  }\n}\nclass PuzzleGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { board: [1, 2, 3, 4, 5, 6, 7, 8, 0], size: 3 };\n  }\n  newGame(size) {\n    let board = new Array(size * size);\n    for (let i = 0; i < size * size; ++i) board[i] = i;\n    board = this.shuffle(board);\n    this.updateBoard(board, size);\n    this.setState({ size: size });\n  }\n  updateBoard(board, size) {\n    this.setState({ board: board });\n  }\n  shuffle(o) {\n    const temp = o.slice();\n    for (\n      var j, x, i = temp.length;\n      i;\n      j = Math.floor(Math.random() * i),\n        x = temp[--i],\n        temp[i] = temp[j],\n        temp[j] = x\n    );\n    return temp;\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <DashboardLayout mode={APTITUDE} title=\"APTITUDE\">\n        <div className={classes.root} style={{ textAlign: \"center\" }}>\n          <div className={style.puzzle}>\n            <Typography variant=\"h3\">React puzzle game</Typography>\n            <Typography variant=\"subtitle1\">\n              Click on the squares to move them (only those next to the 0\n              square)\n            </Typography>\n            <ExpansionPanel style={{ backgroundColor: \"#c6cbef\" }}>\n              <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel1a-content\"\n              >\n                <Typography style={{ textAlign: \"center\" }}>Rules</Typography>\n              </ExpansionPanelSummary>\n              <ExpansionPanelDetails>\n                <Typography>\n                  A.Only the cells adjacent to zero can be moved .\n                </Typography>{\" \"}\n                <br />\n                <Typography>\n                  {\" \"}\n                  B.Goal is to arrange all the numbers in sequential order.\n                </Typography>{\" \"}\n                <Typography>\n                  {\" \"}\n                  C.Lesser is the number of moves more is the score .\n                </Typography>{\" \"}\n                <Typography>\n                  D.Larger is the size of board , more is the score player\n                  attains on achieving goal state.\n                </Typography>\n              </ExpansionPanelDetails>\n            </ExpansionPanel>\n            <br />\n            <br />\n            {this.state && this.state.board ? (\n              <div className={style.blocks}>\n                <Board\n                  size={this.state.size}\n                  board={this.state.board}\n                  updateBoard={this.updateBoard.bind(this)}\n                />\n              </div>\n            ) : null}\n            <br />\n            <br />\n            <input\n              type=\"submit\"\n              value=\"New 3x3 game\"\n              onClick={this.newGame.bind(this, 3)}\n            />\n            <input\n              type=\"submit\"\n              value=\"New 4x4 game\"\n              onClick={this.newGame.bind(this, 4)}\n            />\n            <input\n              type=\"submit\"\n              value=\"New 5x5 game\"\n              onClick={this.newGame.bind(this, 5)}\n            />\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n}\n\nconst mapStatetoProps = state => {\n  return {\n    token: state.auth.token,\n    projectlistTabledata: state.project.projectlistTabledata\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    pushProjectListdata: data =>\n      dispatch({ type: \"PUSH PROJECTLIST DATA\", data: data })\n  };\n};\n\nexport default connect(\n  mapStatetoProps,\n  mapDispatchToProps\n)(withStyles(styles)(PuzzleGame));\n"]},"metadata":{},"sourceType":"module"}