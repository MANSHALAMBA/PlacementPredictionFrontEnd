{"ast":null,"code":"import _objectSpread from \"/home/lambamansha/Desktop/faculty_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/lambamansha/Desktop/faculty_portal/src/views/ProjectList/components/CreateEvent/index.jsx\";\nimport React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport validate from \"validate.js\";\nimport moment from \"moment\";\nimport { isEmpty } from \"helpers/helpers\";\nimport { connect } from \"react-redux\";\nimport { fetchFacultyGroups, fetchProjectGroups, CreateReviewEvent } from \"api/projects\";\nimport swal from \"sweetalert\";\nvalidate.extend(validate.validators.datetime, {\n  // The value is guaranteed not to be null or undefined but otherwise it\n  // could be anything.\n  parse: function (value, options) {\n    return +moment.utc(value);\n  },\n  // Input is a unix timestamp\n  format: function (value, options) {\n    var format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\";\n    return moment.utc(value).format(format);\n  }\n});\n\nclass CreateEvent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadreceipents = () => {\n      fetchFacultyGroups(this.props.token).then(data => {\n        let facultygroupslist = data.groups.map(group => {\n          return {\n            id: group.id,\n            name: group.name\n          };\n        });\n        this.setState(prevState => {\n          return {\n            data: _objectSpread({}, prevState.data, {\n              facultygroupslist\n            })\n          };\n        });\n      }).catch(error => swal({\n        title: \"Internal Server Error\",\n        text: \"Please Try Refreshing Page\",\n        button: \"Ok\"\n      }));\n      fetchProjectGroups(this.props.token).then(data => {\n        let projectgroupslist = data.groups.map(group => {\n          return {\n            id: group.id,\n            name: group.name\n          };\n        });\n        this.setState(prevState => {\n          return {\n            data: _objectSpread({}, prevState.data, {\n              projectgroupslist\n            })\n          };\n        });\n      }).catch(error => swal({\n        title: \"Internal Server Error\",\n        text: \" Please Try Refreshing Page\",\n        button: \"Ok\"\n      }));\n    };\n\n    this.onChangeHandler = e => {\n      const _e$target = e.target,\n            name = _e$target.name,\n            value = _e$target.value;\n      this.setState(prevState => {\n        return {\n          data: _objectSpread({}, prevState.data, {\n            [name]: value\n          }),\n          errors: _objectSpread({}, prevState.errors, {\n            [name]: []\n          })\n        };\n      });\n    };\n\n    this.onSubmitHandler = () => {\n      //validation\n      let errors = validate(this.state.data, {\n        eventname: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          }\n        },\n        startdate: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          },\n          datetime: {\n            earliest: moment.utc(),\n            message: \"cannot be in past\"\n          }\n        },\n        enddate: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          },\n          datetime: {\n            earliest: this.state.data.startdate,\n            message: \"cannot be before start date\"\n          }\n        },\n        facultygroup: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          }\n        },\n        projectgroup: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          }\n        }\n      }); // validation for parameters array\n\n      let paramErr = this.state.data.parameters.map(param => {\n        let error = {};\n\n        if (isEmpty(param.Name)) {\n          error.Name = \"*required\";\n        }\n\n        if (isEmpty(param.MaximumMarks)) {\n          error.MaximumMarks = \"*required\";\n        }\n\n        return Object.keys(error).length > 0 ? error : null;\n      }); // check for errors\n\n      if (paramErr.some(val => val !== null) && errors) {\n        this.setState(prevState => {\n          return {\n            data: _objectSpread({}, prevState.data),\n            errors: _objectSpread({}, prevState.errors, errors, {\n              parameters: paramErr\n            })\n          };\n        });\n      } else if (errors) {\n        this.setState({\n          errors\n        });\n      } else if (paramErr.some(val => val !== null)) {\n        this.setState(prevState => {\n          return {\n            data: _objectSpread({}, prevState.data),\n            errors: _objectSpread({}, prevState.errors, {\n              parameters: paramErr\n            })\n          };\n        });\n      } else {\n        this.setState({\n          isLoading: true\n        });\n        let data = {\n          title: this.state.data.eventname,\n          schedule: this.state.data.startdate,\n          expiry: this.state.data.enddate,\n          parameters: this.state.data.parameters,\n          moderatorId: this.state.data.facultygroup.id,\n          participantId: this.state.data.projectgroup.id\n        };\n        CreateReviewEvent(this.props.token, data).then(data => {\n          swal({\n            title: \"Success\",\n            text: \"Review event has been created successfully\",\n            button: \"Ok\"\n          });\n          this.props.handleClose();\n        }).catch(error => swal({\n          title: \"Error\",\n          text: error.response.data.message,\n          button: \"Ok\"\n        }));\n      }\n    };\n\n    this.addParam = e => {\n      e.preventDefault();\n      let parameters = [...this.state.data.parameters];\n\n      if (parameters.length < 10) {\n        parameters.push({\n          Name: \"\",\n          MaximumMarks: null\n        });\n        this.setState({\n          data: _objectSpread({}, this.state.data, {\n            parameters\n          })\n        });\n      }\n    };\n\n    this.handleChangeParam = (e, idx) => {\n      e.preventDefault();\n      let parameters = [...this.state.data.parameters];\n      parameters[idx][e.target.name] = e.target.value;\n\n      let error = _objectSpread({}, this.state.errors);\n\n      if (error.parameters && error.parameters.length > idx) {\n        delete error.parameters[idx];\n      }\n\n      this.setState({\n        data: _objectSpread({}, this.state.data, {\n          parameters\n        }),\n        error\n      });\n    };\n\n    this.removeParam = (e, index) => {\n      e.preventDefault();\n      let parameters = [...this.state.data.parameters];\n\n      if (parameters.length > 1) {\n        parameters.splice(index, 1);\n        this.setState({\n          data: _objectSpread({}, this.state.data, {\n            parameters\n          })\n        });\n      }\n    };\n\n    this.state = {\n      data: {\n        eventname: \"\",\n        startdate: \"\",\n        enddate: \"\",\n        facultygroup: {},\n        projectgroup: {},\n        facultygroupslist: [\"a\", \"b\"],\n        projectgroupslist: [\"c\", \"d\"],\n        parameters: [{\n          Name: \"\",\n          MaximumMarks: null\n        }]\n      },\n      errors: {},\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {\n    this.loadreceipents();\n  }\n\n  render() {\n    return React.createElement(Form, {\n      open: this.props.open,\n      handleClose: this.props.handleClose,\n      onChangeHandler: this.onChangeHandler,\n      onSubmit: this.onSubmitHandler,\n      errors: this.state.errors,\n      facultygroupslist: this.state.data.facultygroupslist,\n      facultygroup: this.state.data.facultygroup,\n      projectgroupslist: this.state.data.projectgroupslist,\n      projectgroup: this.state.data.projectgroup,\n      addParam: this.addParam,\n      parameters: this.state.data.parameters,\n      handleChangeParam: this.handleChangeParam,\n      removeParam: this.removeParam,\n      isLoading: this.state.isLoading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst MapStatetoProps = state => {\n  return {\n    token: state.auth.token\n  };\n};\n\nexport default connect(MapStatetoProps)(CreateEvent);","map":{"version":3,"sources":["/home/lambamansha/Desktop/faculty_portal/src/views/ProjectList/components/CreateEvent/index.jsx"],"names":["React","Component","Form","validate","moment","isEmpty","connect","fetchFacultyGroups","fetchProjectGroups","CreateReviewEvent","swal","extend","validators","datetime","parse","value","options","utc","format","dateOnly","CreateEvent","constructor","props","loadreceipents","token","then","data","facultygroupslist","groups","map","group","id","name","setState","prevState","catch","error","title","text","button","projectgroupslist","onChangeHandler","e","target","errors","onSubmitHandler","state","eventname","presence","allowEmpty","message","startdate","earliest","enddate","facultygroup","projectgroup","paramErr","parameters","param","Name","MaximumMarks","Object","keys","length","some","val","isLoading","schedule","expiry","moderatorId","participantId","handleClose","response","addParam","preventDefault","push","handleChangeParam","idx","removeParam","index","splice","componentDidMount","render","open","MapStatetoProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport validate from \"validate.js\";\nimport moment from \"moment\";\nimport { isEmpty } from \"helpers/helpers\";\nimport { connect } from \"react-redux\";\nimport {\n\tfetchFacultyGroups,\n\tfetchProjectGroups,\n\tCreateReviewEvent\n} from \"api/projects\";\nimport swal from \"sweetalert\";\n\nvalidate.extend(validate.validators.datetime, {\n\t// The value is guaranteed not to be null or undefined but otherwise it\n\t// could be anything.\n\tparse: function(value, options) {\n\t\treturn +moment.utc(value);\n\t},\n\t// Input is a unix timestamp\n\tformat: function(value, options) {\n\t\tvar format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\";\n\t\treturn moment.utc(value).format(format);\n\t}\n});\n\nclass CreateEvent extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdata: {\n\t\t\t\teventname: \"\",\n\t\t\t\tstartdate: \"\",\n\t\t\t\tenddate: \"\",\n\t\t\t\tfacultygroup: {},\n\t\t\t\tprojectgroup: {},\n\t\t\t\tfacultygroupslist: [\"a\", \"b\"],\n\t\t\t\tprojectgroupslist: [\"c\", \"d\"],\n\t\t\t\tparameters: [{ Name: \"\", MaximumMarks: null }]\n\t\t\t},\n\t\t\terrors: {},\n\t\t\tisLoading: false\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tthis.loadreceipents();\n\t}\n\n\tloadreceipents = () => {\n\t\tfetchFacultyGroups(this.props.token)\n\t\t\t.then(data => {\n\t\t\t\tlet facultygroupslist = data.groups.map(group => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: group.id,\n\t\t\t\t\t\tname: group.name\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tthis.setState(prevState => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t...prevState.data,\n\n\t\t\t\t\t\t\tfacultygroupslist\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error =>\n\t\t\t\tswal({\n\t\t\t\t\ttitle: \"Internal Server Error\",\n\t\t\t\t\ttext: \"Please Try Refreshing Page\",\n\n\t\t\t\t\tbutton: \"Ok\"\n\t\t\t\t})\n\t\t\t);\n\n\t\tfetchProjectGroups(this.props.token)\n\t\t\t.then(data => {\n\t\t\t\tlet projectgroupslist = data.groups.map(group => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: group.id,\n\t\t\t\t\t\tname: group.name\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tthis.setState(prevState => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t...prevState.data,\n\n\t\t\t\t\t\t\tprojectgroupslist\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error =>\n\t\t\t\tswal({\n\t\t\t\t\ttitle: \"Internal Server Error\",\n\t\t\t\t\ttext: \" Please Try Refreshing Page\",\n\n\t\t\t\t\tbutton: \"Ok\"\n\t\t\t\t})\n\t\t\t);\n\t};\n\n\tonChangeHandler = e => {\n\t\tconst { name, value } = e.target;\n\n\t\tthis.setState(prevState => {\n\t\t\treturn {\n\t\t\t\tdata: {\n\t\t\t\t\t...prevState.data,\n\t\t\t\t\t[name]: value\n\t\t\t\t},\n\t\t\t\terrors: {\n\t\t\t\t\t...prevState.errors,\n\t\t\t\t\t[name]: []\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t};\n\n\tonSubmitHandler = () => {\n\t\t//validation\n\t\tlet errors = validate(this.state.data, {\n\t\t\teventname: { presence: { allowEmpty: false, message: \"is required\" } },\n\t\t\tstartdate: {\n\t\t\t\tpresence: { allowEmpty: false, message: \"is required\" },\n\t\t\t\tdatetime: {\n\t\t\t\t\tearliest: moment.utc(),\n\t\t\t\t\tmessage: \"cannot be in past\"\n\t\t\t\t}\n\t\t\t},\n\t\t\tenddate: {\n\t\t\t\tpresence: { allowEmpty: false, message: \"is required\" },\n\t\t\t\tdatetime: {\n\t\t\t\t\tearliest: this.state.data.startdate,\n\t\t\t\t\tmessage: \"cannot be before start date\"\n\t\t\t\t}\n\t\t\t},\n\t\t\tfacultygroup: { presence: { allowEmpty: false, message: \"is required\" } },\n\t\t\tprojectgroup: { presence: { allowEmpty: false, message: \"is required\" } }\n\t\t});\n\n\t\t// validation for parameters array\n\t\tlet paramErr = this.state.data.parameters.map(param => {\n\t\t\tlet error = {};\n\n\t\t\tif (isEmpty(param.Name)) {\n\t\t\t\terror.Name = \"*required\";\n\t\t\t}\n\t\t\tif (isEmpty(param.MaximumMarks)) {\n\t\t\t\terror.MaximumMarks = \"*required\";\n\t\t\t}\n\n\t\t\treturn Object.keys(error).length > 0 ? error : null;\n\t\t});\n\n\t\t// check for errors\n\t\tif (paramErr.some(val => val !== null) && errors) {\n\t\t\tthis.setState(prevState => {\n\t\t\t\treturn {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t...prevState.data\n\t\t\t\t\t},\n\n\t\t\t\t\terrors: {\n\t\t\t\t\t\t...prevState.errors,\n\t\t\t\t\t\t...errors,\n\t\t\t\t\t\tparameters: paramErr\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t\t} else if (errors) {\n\t\t\tthis.setState({ errors });\n\t\t} else if (paramErr.some(val => val !== null)) {\n\t\t\tthis.setState(prevState => {\n\t\t\t\treturn {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t...prevState.data\n\t\t\t\t\t},\n\n\t\t\t\t\terrors: {\n\t\t\t\t\t\t...prevState.errors,\n\n\t\t\t\t\t\tparameters: paramErr\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tisLoading: true\n\t\t\t});\n\t\t\tlet data = {\n\t\t\t\ttitle: this.state.data.eventname,\n\t\t\t\tschedule: this.state.data.startdate,\n\t\t\t\texpiry: this.state.data.enddate,\n\t\t\t\tparameters: this.state.data.parameters,\n\t\t\t\tmoderatorId: this.state.data.facultygroup.id,\n\t\t\t\tparticipantId: this.state.data.projectgroup.id\n\t\t\t};\n\n\t\t\tCreateReviewEvent(this.props.token, data)\n\t\t\t\t.then(data => {\n\t\t\t\t\tswal({\n\t\t\t\t\t\ttitle: \"Success\",\n\t\t\t\t\t\ttext: \"Review event has been created successfully\",\n\n\t\t\t\t\t\tbutton: \"Ok\"\n\t\t\t\t\t});\n\t\t\t\t\tthis.props.handleClose();\n\t\t\t\t})\n\t\t\t\t.catch(error =>\n\t\t\t\t\tswal({\n\t\t\t\t\t\ttitle: \"Error\",\n\t\t\t\t\t\ttext: error.response.data.message,\n\n\t\t\t\t\t\tbutton: \"Ok\"\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t}\n\t};\n\n\taddParam = e => {\n\t\te.preventDefault();\n\n\t\tlet parameters = [...this.state.data.parameters];\n\n\t\tif (parameters.length < 10) {\n\t\t\tparameters.push({ Name: \"\", MaximumMarks: null });\n\t\t\tthis.setState({ data: { ...this.state.data, parameters } });\n\t\t}\n\t};\n\n\thandleChangeParam = (e, idx) => {\n\t\te.preventDefault();\n\n\t\tlet parameters = [...this.state.data.parameters];\n\t\tparameters[idx][e.target.name] = e.target.value;\n\n\t\tlet error = { ...this.state.errors };\n\n\t\tif (error.parameters && error.parameters.length > idx) {\n\t\t\tdelete error.parameters[idx];\n\t\t}\n\n\t\tthis.setState({ data: { ...this.state.data, parameters }, error });\n\t};\n\n\tremoveParam = (e, index) => {\n\t\te.preventDefault();\n\n\t\tlet parameters = [...this.state.data.parameters];\n\t\tif (parameters.length > 1) {\n\t\t\tparameters.splice(index, 1);\n\t\t\tthis.setState({ data: { ...this.state.data, parameters } });\n\t\t}\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Form\n\t\t\t\topen={this.props.open}\n\t\t\t\thandleClose={this.props.handleClose}\n\t\t\t\tonChangeHandler={this.onChangeHandler}\n\t\t\t\tonSubmit={this.onSubmitHandler}\n\t\t\t\terrors={this.state.errors}\n\t\t\t\tfacultygroupslist={this.state.data.facultygroupslist}\n\t\t\t\tfacultygroup={this.state.data.facultygroup}\n\t\t\t\tprojectgroupslist={this.state.data.projectgroupslist}\n\t\t\t\tprojectgroup={this.state.data.projectgroup}\n\t\t\t\taddParam={this.addParam}\n\t\t\t\tparameters={this.state.data.parameters}\n\t\t\t\thandleChangeParam={this.handleChangeParam}\n\t\t\t\tremoveParam={this.removeParam}\n\t\t\t\tisLoading={this.state.isLoading}\n\t\t\t/>\n\t\t);\n\t}\n}\nconst MapStatetoProps = state => {\n\treturn {\n\t\ttoken: state.auth.token\n\t};\n};\n\nexport default connect(MapStatetoProps)(CreateEvent);\n"]},"metadata":{},"sourceType":"module"}