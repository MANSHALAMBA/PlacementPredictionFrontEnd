{"ast":null,"code":"import _objectSpread from \"/home/lambamansha/Desktop/faculty_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/lambamansha/Desktop/faculty_portal/src/views/Quiz/components/EditQuiz/index.jsx\";\nimport React, { Component } from \"react\";\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\nimport EditToolbar from \"./components/EditToolbar\";\nimport Header from \"./components/header\";\nimport { Typography } from \"@material-ui/core\";\nimport Visualization from \"./components/Visualization\";\nimport MaterialTable from \"material-table\";\nimport QuestionForm from \"./components/QuestionsForm\";\nimport { Loader } from \"components\";\nimport { connect } from \"react-redux\";\nimport { fetchquizdetails, removeQuestion } from \"api/quizzes\";\nimport { Quizdetail, Question } from \"serializers/quiz\";\n\nclass EditQuiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadData = () => {\n      fetchquizdetails(this.props.token, this.props.match.params.quizId).then(data => {\n        console.log(data.quiz);\n        this.setState({\n          isLoading: false,\n          data: new Quizdetail(data.quiz)\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.AddQuestionToTable = newquestion => {\n      let Questions = [...this.state.data.Questions];\n      Questions.push(new Question(newquestion));\n      this.setState(prevState => {\n        return {\n          data: _objectSpread({}, prevState.data, {\n            numberOfQuestions: this.state.data.numberOfQuestions + 1,\n            Questions\n          })\n        };\n      });\n    };\n\n    this.Deletequestion = questionId => {\n      let Questions = [...this.state.data.Questions];\n      let indexofquestion = 0;\n\n      const myFunction = (question, index) => {\n        if (question.id === questionId) {\n          indexofquestion = index;\n        }\n      };\n\n      Questions.forEach(myFunction);\n      Questions.splice(indexofquestion, 1);\n      this.setState(prevState => {\n        return {\n          data: _objectSpread({}, prevState.data, {\n            numberOfQuestions: this.state.data.numberOfQuestions - 1,\n            Questions\n          })\n        };\n      });\n    };\n\n    this.columns = [{\n      title: \"Question\",\n      field: \"questiontitle\"\n    }, {\n      title: \"Options\",\n      field: \"options\",\n      render: rowData => rowData.options.map(option => {\n        if (option.isCorrect) {\n          return React.createElement(\"li\", {\n            style: {\n              color: \"green\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122\n            },\n            __self: this\n          }, option.value);\n        } else return React.createElement(\"li\", {\n          style: {\n            color: \"red\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, option.value);\n      })\n    }, {\n      title: \"Difficulty Level\",\n      field: \"difficultyLevel\"\n    }, {\n      title: \"Skills\",\n      field: \"skills\",\n      render: rowData => rowData.skills.map(skill => {\n        return React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, skill);\n      })\n    }, {\n      title: \"Id\",\n      field: \"id\",\n      hidden: true\n    }];\n    this.actions = [// {\n    // \ticon: \"edit\",\n    // \ttooltip: \"Edit Question\",\n    // \tonClick: (event, rowData) => {\n    // \t\tconsole.log(rowData);\n    // \t\treturn this.handleOpenForm(\"EDIT\", rowData);\n    // \t}\n    // },\n    {\n      icon: \"delete_outline\",\n      tooltip: \"Delete Question\",\n      onClick: (event, rowData) => {\n        removeQuestion(this.props.token, this.props.match.params.quizId, rowData.id).then(data => this.Deletequestion(data.questionId)).catch(error => console.log(error));\n      }\n    }];\n\n    this.handleOpenForm = (mode = \"ADD\", data = null) => {\n      this.setState({\n        form: {\n          open: true,\n          mode,\n          data\n        }\n      });\n    };\n\n    this.handleCloseForm = () => {\n      this.setState({\n        form: {\n          open: false,\n          mode: \"ADD\",\n          data: null\n        }\n      });\n    };\n\n    this.state = {\n      data: {\n        title: \"Python\",\n        skills: [\"ds\", \"algo\"],\n        numberOfQuestions: 5,\n        Questions: [{\n          questiontitle: \"what is python\",\n          options: [\"a\", \"b\"],\n          correctOption: \"a\",\n          difficultyLevel: \"easy\",\n          skills: [\"ds\"],\n          id: \"1\"\n        }, {\n          questiontitle: \"what is python\",\n          options: [\"a\", \"b\"],\n          correctOption: \"b\",\n          difficultyLevel: \"hard\",\n          skills: [\"algo\"],\n          id: \"2\"\n        }, {\n          questiontitle: \"what is python\",\n          options: [\"a\", \"b\"],\n          correctOption: \"a\",\n          difficultyLevel: \"medium\",\n          skills: [\"ds\"],\n          id: \"3\"\n        }],\n        estimatedTime: 160\n      },\n      form: {\n        open: false,\n        mode: \"ADD\",\n        data: null\n      },\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, !this.state.isLoading ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.heading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      align: \"center\",\n      variant: \"h3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, this.state.data.title)), React.createElement(EditToolbar, {\n      handleOpenForm: this.handleOpenForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), this.state.form.open && React.createElement(QuestionForm, {\n      open: this.state.form.open,\n      mode: this.state.form.mode,\n      data: this.state.form.data,\n      handleCloseForm: this.handleCloseForm,\n      skills: this.state.data.skills,\n      AddQuestionToTable: this.AddQuestionToTable,\n      quizId: this.props.match.params.quizId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: classes.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(Header, {\n      numberOfQuestions: this.state.data.numberOfQuestions,\n      estimatedTime: this.state.data.estimatedTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(Visualization, {\n      questions: this.state.data.Questions,\n      skills: this.state.data.skills,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(MaterialTable, {\n      columns: this.columns,\n      data: this.state.data.Questions,\n      options: {\n        filtering: true,\n        actionsColumnIndex: -1\n      },\n      actions: this.actions,\n      title: \"Questions List\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })))) : React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(EditQuiz));","map":{"version":3,"sources":["/home/lambamansha/Desktop/faculty_portal/src/views/Quiz/components/EditQuiz/index.jsx"],"names":["React","Component","styles","withStyles","EditToolbar","Header","Typography","Visualization","MaterialTable","QuestionForm","Loader","connect","fetchquizdetails","removeQuestion","Quizdetail","Question","EditQuiz","constructor","props","loadData","token","match","params","quizId","then","data","console","log","quiz","setState","isLoading","catch","error","AddQuestionToTable","newquestion","Questions","state","push","prevState","numberOfQuestions","Deletequestion","questionId","indexofquestion","myFunction","question","index","id","forEach","splice","columns","title","field","render","rowData","options","map","option","isCorrect","color","value","skills","skill","hidden","actions","icon","tooltip","onClick","event","handleOpenForm","mode","form","open","handleCloseForm","questiontitle","correctOption","difficultyLevel","estimatedTime","componentDidMount","classes","root","heading","content","filtering","actionsColumnIndex","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\nimport EditToolbar from \"./components/EditToolbar\";\nimport Header from \"./components/header\";\nimport { Typography } from \"@material-ui/core\";\nimport Visualization from \"./components/Visualization\";\nimport MaterialTable from \"material-table\";\nimport QuestionForm from \"./components/QuestionsForm\";\nimport { Loader } from \"components\";\nimport { connect } from \"react-redux\";\nimport { fetchquizdetails, removeQuestion } from \"api/quizzes\";\nimport { Quizdetail, Question } from \"serializers/quiz\";\nclass EditQuiz extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdata: {\n\t\t\t\ttitle: \"Python\",\n\t\t\t\tskills: [\"ds\", \"algo\"],\n\t\t\t\tnumberOfQuestions: 5,\n\t\t\t\tQuestions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tquestiontitle: \"what is python\",\n\t\t\t\t\t\toptions: [\"a\", \"b\"],\n\t\t\t\t\t\tcorrectOption: \"a\",\n\t\t\t\t\t\tdifficultyLevel: \"easy\",\n\t\t\t\t\t\tskills: [\"ds\"],\n\t\t\t\t\t\tid: \"1\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tquestiontitle: \"what is python\",\n\t\t\t\t\t\toptions: [\"a\", \"b\"],\n\t\t\t\t\t\tcorrectOption: \"b\",\n\t\t\t\t\t\tdifficultyLevel: \"hard\",\n\t\t\t\t\t\tskills: [\"algo\"],\n\t\t\t\t\t\tid: \"2\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tquestiontitle: \"what is python\",\n\t\t\t\t\t\toptions: [\"a\", \"b\"],\n\t\t\t\t\t\tcorrectOption: \"a\",\n\t\t\t\t\t\tdifficultyLevel: \"medium\",\n\t\t\t\t\t\tskills: [\"ds\"],\n\t\t\t\t\t\tid: \"3\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\testimatedTime: 160\n\t\t\t},\n\t\t\tform: {\n\t\t\t\topen: false,\n\t\t\t\tmode: \"ADD\",\n\t\t\t\tdata: null\n\t\t\t},\n\t\t\tisLoading: true\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.loadData();\n\t}\n\n\tloadData = () => {\n\t\tfetchquizdetails(this.props.token, this.props.match.params.quizId)\n\t\t\t.then(data => {\n\t\t\t\tconsole.log(data.quiz);\n\t\t\t\tthis.setState({\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\tdata: new Quizdetail(data.quiz)\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t};\n\n\tAddQuestionToTable = newquestion => {\n\t\tlet Questions = [...this.state.data.Questions];\n\t\tQuestions.push(new Question(newquestion));\n\t\tthis.setState(prevState => {\n\t\t\treturn {\n\t\t\t\tdata: {\n\t\t\t\t\t...prevState.data,\n\t\t\t\t\tnumberOfQuestions: this.state.data.numberOfQuestions + 1,\n\t\t\t\t\tQuestions\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t};\n\n\tDeletequestion = questionId => {\n\t\tlet Questions = [...this.state.data.Questions];\n\n\t\tlet indexofquestion = 0;\n\t\tconst myFunction = (question, index) => {\n\t\t\tif (question.id === questionId) {\n\t\t\t\tindexofquestion = index;\n\t\t\t}\n\t\t};\n\t\tQuestions.forEach(myFunction);\n\n\t\tQuestions.splice(indexofquestion, 1);\n\t\tthis.setState(prevState => {\n\t\t\treturn {\n\t\t\t\tdata: {\n\t\t\t\t\t...prevState.data,\n\t\t\t\t\tnumberOfQuestions: this.state.data.numberOfQuestions - 1,\n\t\t\t\t\tQuestions\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t};\n\n\tcolumns = [\n\t\t{ title: \"Question\", field: \"questiontitle\" },\n\t\t{\n\t\t\ttitle: \"Options\",\n\t\t\tfield: \"options\",\n\t\t\trender: rowData =>\n\t\t\t\trowData.options.map(option => {\n\t\t\t\t\tif (option.isCorrect) {\n\t\t\t\t\t\treturn <li style={{ color: \"green\" }}>{option.value}</li>;\n\t\t\t\t\t} else return <li style={{ color: \"red\" }}>{option.value}</li>;\n\t\t\t\t})\n\t\t},\n\t\t{\n\t\t\ttitle: \"Difficulty Level\",\n\t\t\tfield: \"difficultyLevel\"\n\t\t},\n\t\t{\n\t\t\ttitle: \"Skills\",\n\t\t\tfield: \"skills\",\n\t\t\trender: rowData =>\n\t\t\t\trowData.skills.map(skill => {\n\t\t\t\t\treturn <li>{skill}</li>;\n\t\t\t\t})\n\t\t},\n\t\t{\n\t\t\ttitle: \"Id\",\n\t\t\tfield: \"id\",\n\t\t\thidden: true\n\t\t}\n\t];\n\n\tactions = [\n\t\t// {\n\t\t// \ticon: \"edit\",\n\t\t// \ttooltip: \"Edit Question\",\n\t\t// \tonClick: (event, rowData) => {\n\t\t// \t\tconsole.log(rowData);\n\t\t// \t\treturn this.handleOpenForm(\"EDIT\", rowData);\n\t\t// \t}\n\t\t// },\n\n\t\t{\n\t\t\ticon: \"delete_outline\",\n\t\t\ttooltip: \"Delete Question\",\n\t\t\tonClick: (event, rowData) => {\n\t\t\t\tremoveQuestion(\n\t\t\t\t\tthis.props.token,\n\t\t\t\t\tthis.props.match.params.quizId,\n\t\t\t\t\trowData.id\n\t\t\t\t)\n\t\t\t\t\t.then(data => this.Deletequestion(data.questionId))\n\t\t\t\t\t.catch(error => console.log(error));\n\t\t\t}\n\t\t}\n\t];\n\n\thandleOpenForm = (mode = \"ADD\", data = null) => {\n\t\tthis.setState({\n\t\t\tform: { open: true, mode, data }\n\t\t});\n\t};\n\thandleCloseForm = () => {\n\t\tthis.setState({ form: { open: false, mode: \"ADD\", data: null } });\n\t};\n\n\trender() {\n\t\tconst { classes } = this.props;\n\t\treturn (\n\t\t\t<div className={classes.root}>\n\t\t\t\t{!this.state.isLoading ? (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div className={classes.heading}>\n\t\t\t\t\t\t\t<Typography align=\"center\" variant=\"h3\">\n\t\t\t\t\t\t\t\t{this.state.data.title}\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<EditToolbar handleOpenForm={this.handleOpenForm} />\n\t\t\t\t\t\t{this.state.form.open && (\n\t\t\t\t\t\t\t<QuestionForm\n\t\t\t\t\t\t\t\topen={this.state.form.open}\n\t\t\t\t\t\t\t\tmode={this.state.form.mode}\n\t\t\t\t\t\t\t\tdata={this.state.form.data}\n\t\t\t\t\t\t\t\thandleCloseForm={this.handleCloseForm}\n\t\t\t\t\t\t\t\tskills={this.state.data.skills}\n\t\t\t\t\t\t\t\tAddQuestionToTable={this.AddQuestionToTable}\n\t\t\t\t\t\t\t\tquizId={this.props.match.params.quizId}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<div className={classes.content}>\n\t\t\t\t\t\t\t<Header\n\t\t\t\t\t\t\t\tnumberOfQuestions={this.state.data.numberOfQuestions}\n\t\t\t\t\t\t\t\testimatedTime={this.state.data.estimatedTime}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<Visualization\n\t\t\t\t\t\t\t\tquestions={this.state.data.Questions}\n\t\t\t\t\t\t\t\tskills={this.state.data.skills}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<MaterialTable\n\t\t\t\t\t\t\t\t\tcolumns={this.columns}\n\t\t\t\t\t\t\t\t\tdata={this.state.data.Questions}\n\t\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\t\tfiltering: true,\n\t\t\t\t\t\t\t\t\t\tactionsColumnIndex: -1\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tactions={this.actions}\n\t\t\t\t\t\t\t\t\ttitle=\"Questions List\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<Loader />\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\ttoken: state.auth.token\n\t};\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(EditQuiz));\n"]},"metadata":{},"sourceType":"module"}