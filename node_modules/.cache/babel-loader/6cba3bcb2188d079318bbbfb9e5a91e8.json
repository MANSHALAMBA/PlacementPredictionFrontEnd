{"ast":null,"code":"import _objectSpread from \"/home/lambamansha/Desktop/faculty_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { GRAPH_API_URL } from \"../config\";\nimport { Storage } from \"../helpers\";\nimport { USER_TOKEN } from \"../constants/storage/auth\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloLink, from } from \"apollo-link\";\nconst httpLink = new HttpLink({\n  uri: GRAPH_API_URL\n});\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  operation.setContext(({\n    headers = {}\n  }) => {\n    const token = Storage.read(USER_TOKEN);\n    return {\n      headers: _objectSpread({}, headers, {\n        authorization: token ? \"Bearer \".concat(token) : \"\"\n      })\n    };\n  });\n  return forward(operation);\n});\nconst client = new ApolloClient({\n  link: from([authMiddleware, httpLink]),\n  cache: new InMemoryCache()\n});\nexport default client;","map":{"version":3,"sources":["/home/lambamansha/Desktop/faculty_portal/src/graphql/index.js"],"names":["ApolloClient","InMemoryCache","GRAPH_API_URL","Storage","USER_TOKEN","HttpLink","ApolloLink","from","httpLink","uri","authMiddleware","operation","forward","setContext","headers","token","read","authorization","client","link","cache"],"mappings":";AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,SAASC,aAAT,QAA8B,WAA9B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,UAAT,QAA2B,2BAA3B;AAEA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,aAAjC;AAEA,MAAMC,QAAQ,GAAG,IAAIH,QAAJ,CAAa;AAAEI,EAAAA,GAAG,EAAEP;AAAP,CAAb,CAAjB;AAEA,MAAMQ,cAAc,GAAG,IAAIJ,UAAJ,CAAe,CAACK,SAAD,EAAYC,OAAZ,KAAwB;AAC7D;AACAD,EAAAA,SAAS,CAACE,UAAV,CAAqB,CAAC;AAAEC,IAAAA,OAAO,GAAG;AAAZ,GAAD,KAAsB;AAC1C,UAAMC,KAAK,GAAGZ,OAAO,CAACa,IAAR,CAAaZ,UAAb,CAAd;AAEA,WAAO;AACNU,MAAAA,OAAO,oBACHA,OADG;AAENG,QAAAA,aAAa,EAAEF,KAAK,oBAAaA,KAAb,IAAuB;AAFrC;AADD,KAAP;AAMA,GATD;AAWA,SAAOH,OAAO,CAACD,SAAD,CAAd;AACA,CAdsB,CAAvB;AAgBA,MAAMO,MAAM,GAAG,IAAIlB,YAAJ,CAAiB;AAC/BmB,EAAAA,IAAI,EAAEZ,IAAI,CAAC,CAACG,cAAD,EAAiBF,QAAjB,CAAD,CADqB;AAE/BY,EAAAA,KAAK,EAAE,IAAInB,aAAJ;AAFwB,CAAjB,CAAf;AAKA,eAAeiB,MAAf","sourcesContent":["import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport { GRAPH_API_URL } from \"../config\";\nimport { Storage } from \"../helpers\";\nimport { USER_TOKEN } from \"../constants/storage/auth\";\n\nimport { HttpLink } from \"apollo-link-http\";\nimport { ApolloLink, from } from \"apollo-link\";\n\nconst httpLink = new HttpLink({ uri: GRAPH_API_URL });\n\nconst authMiddleware = new ApolloLink((operation, forward) => {\n\t// add the authorization to the headers\n\toperation.setContext(({ headers = {} }) => {\n\t\tconst token = Storage.read(USER_TOKEN);\n\n\t\treturn {\n\t\t\theaders: {\n\t\t\t\t...headers,\n\t\t\t\tauthorization: token ? `Bearer ${token}` : \"\"\n\t\t\t}\n\t\t};\n\t});\n\n\treturn forward(operation);\n});\n\nconst client = new ApolloClient({\n\tlink: from([authMiddleware, httpLink]),\n\tcache: new InMemoryCache()\n});\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}