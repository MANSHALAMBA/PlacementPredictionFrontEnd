{"ast":null,"code":"var _jsxFileName = \"/home/lambamansha/Desktop/minorproject/src/views/QuizList/index.jsx\";\nimport React, { Component, PureComponent } from \"react\";\nimport { Dashboard as DashboardLayout } from \"layouts\";\nimport { connect } from \"react-redux\";\nimport { APTITUDE } from \"../../constants\";\nimport { Typography } from \"@material-ui/core\"; // styles\n\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\n\nconst randomNumberBetween = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nclass Number extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClick = () => {\n      if (this.props.clickable) {\n        this.props.onClick(this.props.id);\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"number\",\n      style: {\n        opacity: this.props.clickable ? 1 : 0.3\n      },\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, this.props.value);\n  }\n\n}\n\nclass Game extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      gameStatus: \"new\",\n      remainingSeconds: this.props.initialSeconds,\n      selectedIds: []\n    };\n    this.challengeNumbers = Array.from({\n      length: this.props.challengeSize\n    }).map(() => randomNumberBetween(...this.props.challengeRange));\n    this.target = _.sampleSize(this.challengeNumbers, this.props.challengeSize - 2).reduce((acc, curr) => acc + curr, 0);\n\n    this.startGame = () => {\n      this.setState({\n        gameStatus: \"playing\"\n      }, () => {\n        this.intervalId = setInterval(() => {\n          this.setState(prevState => {\n            const newRemainingSeconds = prevState.remainingSeconds - 1;\n\n            if (newRemainingSeconds === 0) {\n              clearInterval(this.intervalId);\n              return {\n                gameStatus: \"lost\",\n                remainingSeconds: 0\n              };\n            }\n\n            return {\n              remainingSeconds: newRemainingSeconds\n            };\n          });\n        }, 1000);\n      });\n    };\n\n    this.isNumberAvailable = numberIndex => this.state.selectedIds.indexOf(numberIndex) === -1;\n\n    this.selectNumber = numberIndex => {\n      if (this.state.gameStatus !== \"playing\") {\n        return;\n      }\n\n      this.setState(prevState => ({\n        selectedIds: [...prevState.selectedIds, numberIndex],\n        gameStatus: this.calcGameStatus([...prevState.selectedIds, numberIndex])\n      }), () => {\n        if (this.state.gameStatus !== \"playing\") {\n          clearInterval(this.intervalId);\n        }\n      });\n    };\n\n    this.calcGameStatus = selectedIds => {\n      const sumSelected = selectedIds.reduce((acc, curr) => acc + this.challengeNumbers[curr], 0);\n\n      if (sumSelected < this.target) {\n        return \"playing\";\n      }\n\n      return sumSelected === this.target ? \"won\" : \"lost\";\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.autoPlay) {\n      this.startGame();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  render() {\n    const _this$state = this.state,\n          gameStatus = _this$state.gameStatus,\n          remainingSeconds = _this$state.remainingSeconds;\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"target\",\n      style: {\n        backgroundColor: Game.bgColors[gameStatus]\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, gameStatus === \"new\" ? \"?\" : this.target), React.createElement(\"div\", {\n      className: \"challenge-numbers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.challengeNumbers.map((value, index) => React.createElement(Number, {\n      key: index,\n      id: index,\n      value: gameStatus === \"new\" ? \"?\" : value,\n      clickable: this.isNumberAvailable(index),\n      onClick: this.selectNumber,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, gameStatus === \"new\" ? React.createElement(\"button\", {\n      onClick: this.startGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Start\") : React.createElement(\"div\", {\n      className: \"timer-value\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, remainingSeconds), [\"won\", \"lost\"].includes(gameStatus) && React.createElement(\"button\", {\n      onClick: this.props.onPlayAgain,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Play Again\")));\n  }\n\n}\n\nGame.bgColors = {\n  playing: \"#ccc\",\n  won: \"green\",\n  lost: \"red\"\n};\n\nclass Sudoku extends Component {\n  constructor(props) {\n    super(props);\n\n    this.resetGame = () => this.setState(prevState => ({\n      gameId: prevState.gameId + 1\n    }));\n\n    this.state = {\n      gameId: 1\n    };\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(DashboardLayout, {\n      mode: APTITUDE,\n      title: \"Quizzes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(Game, {\n      key: this.state.gameId,\n      autoPlay: this.state.gameId > 1,\n      challengeSize: 6,\n      challengeRange: [2, 9],\n      initialSeconds: 10,\n      onPlayAgain: this.resetGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    grid: state.sudokugrid.grid,\n    isSolved: state.sudokustatus.isSolved,\n    isEdited: state.sudokustatus.isEdited\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    undo: () => dispatch({\n      type: \"UNDO\"\n    }),\n    clear: () => dispatch({\n      type: \"CLEAR\"\n    }),\n    solve: () => dispatch({\n      type: \"SOLVE\"\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Sudoku));","map":{"version":3,"sources":["/home/lambamansha/Desktop/minorproject/src/views/QuizList/index.jsx"],"names":["React","Component","PureComponent","Dashboard","DashboardLayout","connect","APTITUDE","Typography","styles","withStyles","randomNumberBetween","min","max","Math","floor","random","Number","handleClick","props","clickable","onClick","id","render","opacity","value","Game","state","gameStatus","remainingSeconds","initialSeconds","selectedIds","challengeNumbers","Array","from","length","challengeSize","map","challengeRange","target","_","sampleSize","reduce","acc","curr","startGame","setState","intervalId","setInterval","prevState","newRemainingSeconds","clearInterval","isNumberAvailable","numberIndex","indexOf","selectNumber","calcGameStatus","sumSelected","componentDidMount","autoPlay","componentWillUnmount","backgroundColor","bgColors","index","includes","onPlayAgain","playing","won","lost","Sudoku","constructor","resetGame","gameId","classes","root","mapStateToProps","token","auth","grid","sudokugrid","isSolved","sudokustatus","isEdited","mapDispatchToProps","dispatch","undo","type","clear","solve"],"mappings":"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","sourcesContent":["import React, { Component, PureComponent } from \"react\";\n\nimport { Dashboard as DashboardLayout } from \"layouts\";\n\nimport { connect } from \"react-redux\";\nimport { APTITUDE } from \"../../constants\";\n\nimport { Typography } from \"@material-ui/core\";\n\n// styles\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\n\nconst randomNumberBetween = (min, max) =>\n  Math.floor(Math.random() * (max - min + 1)) + min;\n\nclass Number extends PureComponent {\n  handleClick = () => {\n    if (this.props.clickable) {\n      this.props.onClick(this.props.id);\n    }\n  };\n\n  render() {\n    return (\n      <div\n        className=\"number\"\n        style={{ opacity: this.props.clickable ? 1 : 0.3 }}\n        onClick={this.handleClick}\n      >\n        {this.props.value}\n      </div>\n    );\n  }\n}\n\nclass Game extends Component {\n  static bgColors = {\n    playing: \"#ccc\",\n    won: \"green\",\n    lost: \"red\"\n  };\n\n  state = {\n    gameStatus: \"new\",\n    remainingSeconds: this.props.initialSeconds,\n    selectedIds: []\n  };\n\n  challengeNumbers = Array.from({ length: this.props.challengeSize }).map(() =>\n    randomNumberBetween(...this.props.challengeRange)\n  );\n\n  target = _.sampleSize(\n    this.challengeNumbers,\n    this.props.challengeSize - 2\n  ).reduce((acc, curr) => acc + curr, 0);\n\n  componentDidMount() {\n    if (this.props.autoPlay) {\n      this.startGame();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  startGame = () => {\n    this.setState({ gameStatus: \"playing\" }, () => {\n      this.intervalId = setInterval(() => {\n        this.setState(prevState => {\n          const newRemainingSeconds = prevState.remainingSeconds - 1;\n          if (newRemainingSeconds === 0) {\n            clearInterval(this.intervalId);\n            return { gameStatus: \"lost\", remainingSeconds: 0 };\n          }\n          return { remainingSeconds: newRemainingSeconds };\n        });\n      }, 1000);\n    });\n  };\n\n  isNumberAvailable = numberIndex =>\n    this.state.selectedIds.indexOf(numberIndex) === -1;\n\n  selectNumber = numberIndex => {\n    if (this.state.gameStatus !== \"playing\") {\n      return;\n    }\n    this.setState(\n      prevState => ({\n        selectedIds: [...prevState.selectedIds, numberIndex],\n        gameStatus: this.calcGameStatus([...prevState.selectedIds, numberIndex])\n      }),\n      () => {\n        if (this.state.gameStatus !== \"playing\") {\n          clearInterval(this.intervalId);\n        }\n      }\n    );\n  };\n\n  calcGameStatus = selectedIds => {\n    const sumSelected = selectedIds.reduce(\n      (acc, curr) => acc + this.challengeNumbers[curr],\n      0\n    );\n    if (sumSelected < this.target) {\n      return \"playing\";\n    }\n    return sumSelected === this.target ? \"won\" : \"lost\";\n  };\n\n  render() {\n    const { gameStatus, remainingSeconds } = this.state;\n    return (\n      <div className=\"game\">\n        <div\n          className=\"target\"\n          style={{ backgroundColor: Game.bgColors[gameStatus] }}\n        >\n          {gameStatus === \"new\" ? \"?\" : this.target}\n        </div>\n        <div className=\"challenge-numbers\">\n          {this.challengeNumbers.map((value, index) => (\n            <Number\n              key={index}\n              id={index}\n              value={gameStatus === \"new\" ? \"?\" : value}\n              clickable={this.isNumberAvailable(index)}\n              onClick={this.selectNumber}\n            />\n          ))}\n        </div>\n        <div className=\"footer\">\n          {gameStatus === \"new\" ? (\n            <button onClick={this.startGame}>Start</button>\n          ) : (\n            <div className=\"timer-value\">{remainingSeconds}</div>\n          )}\n          {[\"won\", \"lost\"].includes(gameStatus) && (\n            <button onClick={this.props.onPlayAgain}>Play Again</button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Sudoku extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { gameId: 1 };\n  }\n\n  resetGame = () =>\n    this.setState(prevState => ({\n      gameId: prevState.gameId + 1\n    }));\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <DashboardLayout mode={APTITUDE} title=\"Quizzes\">\n        <div className={classes.root}>\n          <Game\n            key={this.state.gameId}\n            autoPlay={this.state.gameId > 1}\n            challengeSize={6}\n            challengeRange={[2, 9]}\n            initialSeconds={10}\n            onPlayAgain={this.resetGame}\n          />\n        </div>\n      </DashboardLayout>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    grid: state.sudokugrid.grid,\n    isSolved: state.sudokustatus.isSolved,\n    isEdited: state.sudokustatus.isEdited\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    undo: () => dispatch({ type: \"UNDO\" }),\n    clear: () => dispatch({ type: \"CLEAR\" }),\n    solve: () => dispatch({ type: \"SOLVE\" })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(Sudoku));\n"]},"metadata":{},"sourceType":"module"}