{"ast":null,"code":"import _objectSpread from \"/home/lambamansha/Desktop/faculty_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/lambamansha/Desktop/faculty_portal/src/views/ProjectList/components/CreateEvent/index.jsx\";\nimport React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport validate from \"validate.js\";\nimport moment from \"moment\";\nimport { isEmpty } from \"helpers/helpers\";\nimport { connect } from \"react-redux\";\nimport { fetchFacultyGroups, fetchProjectGroups } from \"api/projects\";\nvalidate.extend(validate.validators.datetime, {\n  // The value is guaranteed not to be null or undefined but otherwise it\n  // could be anything.\n  parse: function (value, options) {\n    return +moment.utc(value);\n  },\n  // Input is a unix timestamp\n  format: function (value, options) {\n    var format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\";\n    return moment.utc(value).format(format);\n  }\n});\n\nclass CreateEvent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadreceipents = () => {\n      fetchFacultyGroups(this.props.token).then(data => {\n        let facultygroupslist = data.groups.map(group => {\n          return {\n            id: group.id,\n            name: group.name\n          };\n        });\n        this.setState(prevState => {\n          return {\n            data: _objectSpread({}, prevState.data, {\n              facultygroupslist\n            })\n          };\n        });\n      }).catch(error => console.log(error));\n      fetchProjectGroups(this.props.token).then(data => {\n        let projectgroupslist = data.groups.map(group => {\n          return {\n            id: group.id,\n            name: group.name\n          };\n        });\n        this.setState(prevState => {\n          return {\n            data: _objectSpread({}, prevState.data, {\n              projectgroupslist\n            })\n          };\n        });\n      }).catch(error => console.log(error));\n    };\n\n    this.onChangeHandler = e => {\n      const _e$target = e.target,\n            name = _e$target.name,\n            value = _e$target.value;\n      this.setState(prevState => {\n        return {\n          data: _objectSpread({}, prevState.data, {\n            [name]: value\n          }),\n          errors: _objectSpread({}, prevState.errors, {\n            [name]: []\n          })\n        };\n      });\n    };\n\n    this.onSubmitHandler = () => {\n      //validation\n      let errors = validate(this.state.data, {\n        eventname: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          }\n        },\n        startdate: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          },\n          datetime: {\n            earliest: moment.utc(),\n            message: \"cannot be in past\"\n          }\n        },\n        enddate: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          },\n          datetime: {\n            earliest: this.state.data.startdate,\n            message: \"cannot be before start date\"\n          }\n        },\n        facultygroup: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          }\n        },\n        projectgroup: {\n          presence: {\n            allowEmpty: false,\n            message: \"is required\"\n          }\n        }\n      }); // validation for parameters array\n\n      let paramErr = this.state.data.parameters.map(param => {\n        let error = {};\n\n        if (isEmpty(param.Name)) {\n          error.Name = \"*required\";\n        }\n\n        if (isEmpty(param.MaximumMarks)) {\n          error.MaximumMarks = \"*required\";\n        }\n\n        return Object.keys(error).length > 0 ? error : null;\n      }); // check for errors\n\n      if (paramErr.some(val => val !== null) && errors) {\n        this.setState(prevState => {\n          return {\n            data: _objectSpread({}, prevState.data),\n            errors: _objectSpread({}, prevState.errors, errors, {\n              parameters: paramErr\n            })\n          };\n        });\n      } else if (errors) {\n        this.setState({\n          errors\n        });\n      } else {\n        this.setState(prevState => {\n          return {\n            data: _objectSpread({}, prevState.data),\n            errors: _objectSpread({}, prevState.errors, {\n              parameters: paramErr\n            })\n          };\n        });\n      }\n    };\n\n    this.addParam = e => {\n      e.preventDefault();\n      let parameters = [...this.state.data.parameters];\n\n      if (parameters.length < 10) {\n        parameters.push({\n          Name: \"\",\n          MaximumMarks: null\n        });\n        this.setState({\n          data: _objectSpread({}, this.state.data, {\n            parameters\n          })\n        });\n      }\n    };\n\n    this.handleChangeParam = (e, idx) => {\n      e.preventDefault();\n      let parameters = [...this.state.data.parameters];\n      parameters[idx][e.target.name] = e.target.value;\n\n      let error = _objectSpread({}, this.state.errors);\n\n      if (error.parameters && error.parameters.length > idx) {\n        delete error.parameters[idx];\n      }\n\n      this.setState({\n        data: _objectSpread({}, this.state.data, {\n          parameters\n        }),\n        error\n      });\n    };\n\n    this.removeParam = (e, index) => {\n      e.preventDefault();\n      let parameters = [...this.state.data.parameters];\n\n      if (parameters.length > 1) {\n        parameters.splice(index, 1);\n        this.setState({\n          data: _objectSpread({}, this.state.data, {\n            parameters\n          })\n        });\n      }\n    };\n\n    this.state = {\n      data: {\n        eventname: \"\",\n        startdate: \"\",\n        enddate: \"\",\n        facultygroup: \"\",\n        projectgroup: \"\",\n        facultygroupslist: [\"a\", \"b\"],\n        projectgroupslist: [\"c\", \"d\"],\n        parameters: [{\n          Name: \"\",\n          MaximumMarks: null\n        }]\n      },\n      errors: {}\n    };\n  }\n\n  componentDidMount() {\n    this.loadreceipents();\n  }\n\n  render() {\n    return React.createElement(Form, {\n      open: this.props.open,\n      handleClose: this.props.handleClose,\n      onChangeHandler: this.onChangeHandler,\n      onSubmit: this.onSubmitHandler,\n      errors: this.state.errors,\n      facultygroupslist: this.state.data.facultygroupslist,\n      facultygroup: this.state.data.facultygroup,\n      projectgroupslist: this.state.data.projectgroupslist,\n      projectgroup: this.state.data.projectgroup,\n      addParam: this.addParam,\n      parameters: this.state.data.parameters,\n      handleChangeParam: this.handleChangeParam,\n      removeParam: this.removeParam,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst MapStatetoProps = state => {\n  return {\n    token: state.auth.token\n  };\n};\n\nexport default connect(MapStatetoProps)(CreateEvent);","map":{"version":3,"sources":["/home/lambamansha/Desktop/faculty_portal/src/views/ProjectList/components/CreateEvent/index.jsx"],"names":["React","Component","Form","validate","moment","isEmpty","connect","fetchFacultyGroups","fetchProjectGroups","extend","validators","datetime","parse","value","options","utc","format","dateOnly","CreateEvent","constructor","props","loadreceipents","token","then","data","facultygroupslist","groups","map","group","id","name","setState","prevState","catch","error","console","log","projectgroupslist","onChangeHandler","e","target","errors","onSubmitHandler","state","eventname","presence","allowEmpty","message","startdate","earliest","enddate","facultygroup","projectgroup","paramErr","parameters","param","Name","MaximumMarks","Object","keys","length","some","val","addParam","preventDefault","push","handleChangeParam","idx","removeParam","index","splice","componentDidMount","render","open","handleClose","MapStatetoProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport validate from \"validate.js\";\nimport moment from \"moment\";\nimport { isEmpty } from \"helpers/helpers\";\nimport { connect } from \"react-redux\";\nimport { fetchFacultyGroups, fetchProjectGroups } from \"api/projects\";\n\nvalidate.extend(validate.validators.datetime, {\n\t// The value is guaranteed not to be null or undefined but otherwise it\n\t// could be anything.\n\tparse: function(value, options) {\n\t\treturn +moment.utc(value);\n\t},\n\t// Input is a unix timestamp\n\tformat: function(value, options) {\n\t\tvar format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\";\n\t\treturn moment.utc(value).format(format);\n\t}\n});\n\nclass CreateEvent extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdata: {\n\t\t\t\teventname: \"\",\n\t\t\t\tstartdate: \"\",\n\t\t\t\tenddate: \"\",\n\t\t\t\tfacultygroup: \"\",\n\t\t\t\tprojectgroup: \"\",\n\t\t\t\tfacultygroupslist: [\"a\", \"b\"],\n\t\t\t\tprojectgroupslist: [\"c\", \"d\"],\n\t\t\t\tparameters: [{ Name: \"\", MaximumMarks: null }]\n\t\t\t},\n\t\t\terrors: {}\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tthis.loadreceipents();\n\t}\n\n\tloadreceipents = () => {\n\t\tfetchFacultyGroups(this.props.token)\n\t\t\t.then(data => {\n\t\t\t\tlet facultygroupslist = data.groups.map(group => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: group.id,\n\t\t\t\t\t\tname: group.name\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tthis.setState(prevState => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t...prevState.data,\n\n\t\t\t\t\t\t\tfacultygroupslist\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => console.log(error));\n\n\t\tfetchProjectGroups(this.props.token)\n\t\t\t.then(data => {\n\t\t\t\tlet projectgroupslist = data.groups.map(group => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: group.id,\n\t\t\t\t\t\tname: group.name\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tthis.setState(prevState => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t...prevState.data,\n\n\t\t\t\t\t\t\tprojectgroupslist\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => console.log(error));\n\t};\n\n\tonChangeHandler = e => {\n\t\tconst { name, value } = e.target;\n\n\t\tthis.setState(prevState => {\n\t\t\treturn {\n\t\t\t\tdata: {\n\t\t\t\t\t...prevState.data,\n\t\t\t\t\t[name]: value\n\t\t\t\t},\n\t\t\t\terrors: {\n\t\t\t\t\t...prevState.errors,\n\t\t\t\t\t[name]: []\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t};\n\n\tonSubmitHandler = () => {\n\t\t//validation\n\t\tlet errors = validate(this.state.data, {\n\t\t\teventname: { presence: { allowEmpty: false, message: \"is required\" } },\n\t\t\tstartdate: {\n\t\t\t\tpresence: { allowEmpty: false, message: \"is required\" },\n\t\t\t\tdatetime: {\n\t\t\t\t\tearliest: moment.utc(),\n\t\t\t\t\tmessage: \"cannot be in past\"\n\t\t\t\t}\n\t\t\t},\n\t\t\tenddate: {\n\t\t\t\tpresence: { allowEmpty: false, message: \"is required\" },\n\t\t\t\tdatetime: {\n\t\t\t\t\tearliest: this.state.data.startdate,\n\t\t\t\t\tmessage: \"cannot be before start date\"\n\t\t\t\t}\n\t\t\t},\n\t\t\tfacultygroup: { presence: { allowEmpty: false, message: \"is required\" } },\n\t\t\tprojectgroup: { presence: { allowEmpty: false, message: \"is required\" } }\n\t\t});\n\n\t\t// validation for parameters array\n\t\tlet paramErr = this.state.data.parameters.map(param => {\n\t\t\tlet error = {};\n\n\t\t\tif (isEmpty(param.Name)) {\n\t\t\t\terror.Name = \"*required\";\n\t\t\t}\n\t\t\tif (isEmpty(param.MaximumMarks)) {\n\t\t\t\terror.MaximumMarks = \"*required\";\n\t\t\t}\n\n\t\t\treturn Object.keys(error).length > 0 ? error : null;\n\t\t});\n\n\t\t// check for errors\n\t\tif (paramErr.some(val => val !== null) && errors) {\n\t\t\tthis.setState(prevState => {\n\t\t\t\treturn {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t...prevState.data\n\t\t\t\t\t},\n\n\t\t\t\t\terrors: {\n\t\t\t\t\t\t...prevState.errors,\n\t\t\t\t\t\t...errors,\n\t\t\t\t\t\tparameters: paramErr\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t\t} else if (errors) {\n\t\t\tthis.setState({ errors });\n\t\t} else {\n\t\t\tthis.setState(prevState => {\n\t\t\t\treturn {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t...prevState.data\n\t\t\t\t\t},\n\n\t\t\t\t\terrors: {\n\t\t\t\t\t\t...prevState.errors,\n\n\t\t\t\t\t\tparameters: paramErr\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t};\n\n\taddParam = e => {\n\t\te.preventDefault();\n\n\t\tlet parameters = [...this.state.data.parameters];\n\n\t\tif (parameters.length < 10) {\n\t\t\tparameters.push({ Name: \"\", MaximumMarks: null });\n\t\t\tthis.setState({ data: { ...this.state.data, parameters } });\n\t\t}\n\t};\n\n\thandleChangeParam = (e, idx) => {\n\t\te.preventDefault();\n\n\t\tlet parameters = [...this.state.data.parameters];\n\t\tparameters[idx][e.target.name] = e.target.value;\n\n\t\tlet error = { ...this.state.errors };\n\n\t\tif (error.parameters && error.parameters.length > idx) {\n\t\t\tdelete error.parameters[idx];\n\t\t}\n\n\t\tthis.setState({ data: { ...this.state.data, parameters }, error });\n\t};\n\n\tremoveParam = (e, index) => {\n\t\te.preventDefault();\n\n\t\tlet parameters = [...this.state.data.parameters];\n\t\tif (parameters.length > 1) {\n\t\t\tparameters.splice(index, 1);\n\t\t\tthis.setState({ data: { ...this.state.data, parameters } });\n\t\t}\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Form\n\t\t\t\topen={this.props.open}\n\t\t\t\thandleClose={this.props.handleClose}\n\t\t\t\tonChangeHandler={this.onChangeHandler}\n\t\t\t\tonSubmit={this.onSubmitHandler}\n\t\t\t\terrors={this.state.errors}\n\t\t\t\tfacultygroupslist={this.state.data.facultygroupslist}\n\t\t\t\tfacultygroup={this.state.data.facultygroup}\n\t\t\t\tprojectgroupslist={this.state.data.projectgroupslist}\n\t\t\t\tprojectgroup={this.state.data.projectgroup}\n\t\t\t\taddParam={this.addParam}\n\t\t\t\tparameters={this.state.data.parameters}\n\t\t\t\thandleChangeParam={this.handleChangeParam}\n\t\t\t\tremoveParam={this.removeParam}\n\t\t\t/>\n\t\t);\n\t}\n}\nconst MapStatetoProps = state => {\n\treturn {\n\t\ttoken: state.auth.token\n\t};\n};\n\nexport default connect(MapStatetoProps)(CreateEvent);\n"]},"metadata":{},"sourceType":"module"}