{"ast":null,"code":"import cloneDeep from \"lodash/cloneDeep\";\nimport { default as extend } from \"lodash/assignIn\";\nimport { solver } from \"views/QuizList/utils/sudoku\";\nconst initialState = {\n  grid: [[8, 0, 0, 4, 0, 6, 0, 0, 7], [0, 0, 0, 0, 0, 0, 4, 0, 0], [0, 1, 0, 0, 0, 0, 6, 5, 0], [5, 0, 9, 0, 3, 0, 7, 8, 0], [0, 0, 0, 0, 7, 0, 0, 0, 0], [0, 4, 8, 0, 2, 0, 1, 0, 3], [0, 5, 2, 0, 0, 0, 0, 9, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0], [3, 0, 0, 9, 0, 2, 0, 0, 5]]\n};\nwindow.gridHistory = window.gridHistory || [];\n\nconst reducer = (state = cloneDeep(initialState), action = {}) => {\n  switch (action.type) {\n    case \"INPUT_VALUE\":\n      let _action$data = action.data,\n          row = _action$data.row,\n          col = _action$data.col,\n          val = _action$data.val;\n      let changedRow = [...state[row].slice(0, col), val, ...state[row].slice(col + 1)]; // Omit using splice since it mutates the state\n      //   gridHistory.push(state);\n\n      return [...state.slice(0, row), changedRow, ...state.slice(row + 1)];\n\n    case \"SOLVE\":\n      let originalClone = cloneDeep(initialState); // originalClone will be mutated by solver()\n\n      solver(originalClone);\n      window.gridHistory = [];\n      return originalClone;\n\n    case \"CLEAR\":\n      window.gridHistory = [];\n      return cloneDeep(initialState);\n\n    case \"UNDO\": //   let lastState = window.gridHistory.splice(gridHistory.length - 1, 1);\n    //   return lastState[0];\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/lambamansha/Desktop/minorproject/src/store/reducers/sudokugrid.js"],"names":["cloneDeep","default","extend","solver","initialState","grid","window","gridHistory","reducer","state","action","type","data","row","col","val","changedRow","slice","originalClone"],"mappings":"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","sourcesContent":["import cloneDeep from \"lodash/cloneDeep\";\nimport { default as extend } from \"lodash/assignIn\";\nimport { solver } from \"views/QuizList/utils/sudoku\";\n\nconst initialState = {\n  grid: [\n    [8, 0, 0, 4, 0, 6, 0, 0, 7],\n    [0, 0, 0, 0, 0, 0, 4, 0, 0],\n    [0, 1, 0, 0, 0, 0, 6, 5, 0],\n    [5, 0, 9, 0, 3, 0, 7, 8, 0],\n    [0, 0, 0, 0, 7, 0, 0, 0, 0],\n    [0, 4, 8, 0, 2, 0, 1, 0, 3],\n    [0, 5, 2, 0, 0, 0, 0, 9, 0],\n    [0, 0, 1, 0, 0, 0, 0, 0, 0],\n    [3, 0, 0, 9, 0, 2, 0, 0, 5]\n  ]\n};\n\nwindow.gridHistory = window.gridHistory || [];\n\nconst reducer = (state = cloneDeep(initialState), action = {}) => {\n  switch (action.type) {\n    case \"INPUT_VALUE\":\n      let { row, col, val } = action.data;\n      let changedRow = [\n        ...state[row].slice(0, col),\n        val,\n        ...state[row].slice(col + 1)\n      ]; // Omit using splice since it mutates the state\n      //   gridHistory.push(state);\n      return [...state.slice(0, row), changedRow, ...state.slice(row + 1)];\n    case \"SOLVE\":\n      let originalClone = cloneDeep(initialState); // originalClone will be mutated by solver()\n      solver(originalClone);\n      window.gridHistory = [];\n      return originalClone;\n    case \"CLEAR\":\n      window.gridHistory = [];\n      return cloneDeep(initialState);\n    case \"UNDO\":\n    //   let lastState = window.gridHistory.splice(gridHistory.length - 1, 1);\n    //   return lastState[0];\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}