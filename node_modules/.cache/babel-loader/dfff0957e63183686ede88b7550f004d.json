{"ast":null,"code":"var _jsxFileName = \"/home/lambamansha/Desktop/minorproject/src/layouts/Dashboard/components/Topbar/index.jsx\";\nimport React, { Component, Fragment } from \"react\";\nimport { withRouter } from \"react-router-dom\"; // Externals\n\nimport classNames from \"classnames\";\nimport compose from \"recompose/compose\";\nimport PropTypes from \"prop-types\"; // Material helpers\n\nimport { withStyles } from \"@material-ui/styles\"; // Material components\n\nimport { Badge, IconButton, Popover, Toolbar, Typography } from \"@material-ui/core\"; // Material icons\n\nimport { Menu as MenuIcon, Close as CloseIcon, NotificationsOutlined as NotificationsIcon, Input as InputIcon } from \"@material-ui/icons\"; // Shared services\n\nimport { getNotifications } from \"services/notification\"; // Custom components\n\nimport { NotificationList } from \"./components\"; // Component styles\n\nimport styles from \"./styles\";\n\nclass Topbar extends Component {\n  constructor(...args) {\n    super(...args);\n    this.signal = true;\n    this.state = {\n      notifications: [],\n      notificationsLimit: 4,\n      notificationsCount: 0,\n      notificationsEl: null\n    };\n\n    this.handleSignOut = () => {\n      // const { history } = this.props;\n      // history.push('/sign-in');\n      this.props.onLogOut();\n    };\n\n    this.handleShowNotifications = event => {\n      this.setState({\n        notificationsEl: event.currentTarget\n      });\n    };\n\n    this.handleCloseNotifications = () => {\n      this.setState({\n        notificationsEl: null\n      });\n    };\n  }\n\n  async getNotifications() {\n    try {\n      const notificationsLimit = this.state.notificationsLimit;\n\n      const _ref = await getNotifications(notificationsLimit),\n            notifications = _ref.notifications,\n            notificationsCount = _ref.notificationsCount;\n\n      if (this.signal) {\n        this.setState({\n          notifications,\n          notificationsCount\n        });\n      }\n    } catch (error) {\n      return;\n    }\n  }\n\n  componentDidMount() {\n    this.signal = true;\n    this.getNotifications();\n  }\n\n  componentWillUnmount() {\n    this.signal = false;\n  }\n\n  render() {\n    const _this$props = this.props,\n          classes = _this$props.classes,\n          className = _this$props.className,\n          title = _this$props.title,\n          isSidebarOpen = _this$props.isSidebarOpen,\n          onToggleSidebar = _this$props.onToggleSidebar;\n    const _this$state = this.state,\n          notifications = _this$state.notifications,\n          notificationsCount = _this$state.notificationsCount,\n          notificationsEl = _this$state.notificationsEl;\n    const rootClassName = classNames(classes.root, className);\n    const showNotifications = Boolean(notificationsEl);\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: rootClassName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Toolbar, {\n      className: classes.toolbar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      className: classes.menuButton,\n      onClick: onToggleSidebar,\n      variant: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, isSidebarOpen ? React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }) : React.createElement(MenuIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      className: classes.title,\n      variant: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, title), React.createElement(IconButton, {\n      className: classes.notificationsButton,\n      onClick: this.handleShowNotifications,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Badge, {\n      badgeContent: notificationsCount,\n      color: \"primary\",\n      variant: \"dot\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(NotificationsIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }))), React.createElement(IconButton, {\n      className: classes.signOutButton,\n      onClick: this.handleSignOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(InputIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    })))), React.createElement(Popover, {\n      anchorEl: notificationsEl,\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"center\"\n      },\n      onClose: this.handleCloseNotifications,\n      open: showNotifications,\n      transformOrigin: {\n        vertical: \"top\",\n        horizontal: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(NotificationList, {\n      notifications: notifications,\n      onSelect: this.handleCloseNotifications,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })));\n  }\n\n}\n\nTopbar.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n  isSidebarOpen: PropTypes.bool,\n  onToggleSidebar: PropTypes.func,\n  title: PropTypes.string\n};\nTopbar.defaultProps = {\n  onToggleSidebar: () => {}\n};\nexport default compose(withRouter, withStyles(styles))(Topbar);","map":{"version":3,"sources":["/home/lambamansha/Desktop/minorproject/src/layouts/Dashboard/components/Topbar/index.jsx"],"names":["React","Component","Fragment","withRouter","classNames","compose","PropTypes","withStyles","Badge","IconButton","Popover","Toolbar","Typography","Menu","MenuIcon","Close","CloseIcon","NotificationsOutlined","NotificationsIcon","Input","InputIcon","getNotifications","NotificationList","styles","Topbar","signal","state","notifications","notificationsLimit","notificationsCount","notificationsEl","handleSignOut","props","onLogOut","handleShowNotifications","event","setState","currentTarget","handleCloseNotifications","error","componentDidMount","componentWillUnmount","render","classes","className","title","isSidebarOpen","onToggleSidebar","rootClassName","root","showNotifications","Boolean","toolbar","menuButton","notificationsButton","signOutButton","vertical","horizontal","propTypes","string","object","isRequired","history","bool","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\n// Externals\nimport classNames from \"classnames\";\nimport compose from \"recompose/compose\";\nimport PropTypes from \"prop-types\";\n\n// Material helpers\nimport { withStyles } from \"@material-ui/styles\";\n\n// Material components\nimport {\n\tBadge,\n\tIconButton,\n\tPopover,\n\tToolbar,\n\tTypography\n} from \"@material-ui/core\";\n\n// Material icons\nimport {\n\tMenu as MenuIcon,\n\tClose as CloseIcon,\n\tNotificationsOutlined as NotificationsIcon,\n\tInput as InputIcon\n} from \"@material-ui/icons\";\n\n// Shared services\nimport { getNotifications } from \"services/notification\";\n\n// Custom components\nimport { NotificationList } from \"./components\";\n\n// Component styles\nimport styles from \"./styles\";\n\nclass Topbar extends Component {\n\tsignal = true;\n\n\tstate = {\n\t\tnotifications: [],\n\t\tnotificationsLimit: 4,\n\t\tnotificationsCount: 0,\n\t\tnotificationsEl: null\n\t};\n\n\tasync getNotifications() {\n\t\ttry {\n\t\t\tconst { notificationsLimit } = this.state;\n\n\t\t\tconst { notifications, notificationsCount } = await getNotifications(\n\t\t\t\tnotificationsLimit\n\t\t\t);\n\n\t\t\tif (this.signal) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tnotifications,\n\t\t\t\t\tnotificationsCount\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (error) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.signal = true;\n\t\tthis.getNotifications();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.signal = false;\n\t}\n\n\thandleSignOut = () => {\n\t\t// const { history } = this.props;\n\n\t\t// history.push('/sign-in');\n\t\tthis.props.onLogOut();\n\t};\n\n\thandleShowNotifications = event => {\n\t\tthis.setState({\n\t\t\tnotificationsEl: event.currentTarget\n\t\t});\n\t};\n\n\thandleCloseNotifications = () => {\n\t\tthis.setState({\n\t\t\tnotificationsEl: null\n\t\t});\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\tclasses,\n\t\t\tclassName,\n\t\t\ttitle,\n\t\t\tisSidebarOpen,\n\t\t\tonToggleSidebar\n\t\t} = this.props;\n\t\tconst { notifications, notificationsCount, notificationsEl } = this.state;\n\n\t\tconst rootClassName = classNames(classes.root, className);\n\t\tconst showNotifications = Boolean(notificationsEl);\n\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<div className={rootClassName}>\n\t\t\t\t\t<Toolbar className={classes.toolbar}>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\tclassName={classes.menuButton}\n\t\t\t\t\t\t\tonClick={onToggleSidebar}\n\t\t\t\t\t\t\tvariant=\"text\">\n\t\t\t\t\t\t\t{isSidebarOpen ? <CloseIcon /> : <MenuIcon />}\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t<Typography className={classes.title} variant=\"h4\">\n\t\t\t\t\t\t\t{title}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\tclassName={classes.notificationsButton}\n\t\t\t\t\t\t\tonClick={this.handleShowNotifications}>\n\t\t\t\t\t\t\t<Badge\n\t\t\t\t\t\t\t\tbadgeContent={notificationsCount}\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tvariant=\"dot\">\n\t\t\t\t\t\t\t\t<NotificationsIcon />\n\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\tclassName={classes.signOutButton}\n\t\t\t\t\t\t\tonClick={this.handleSignOut}>\n\t\t\t\t\t\t\t<InputIcon />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</div>\n\t\t\t\t<Popover\n\t\t\t\t\tanchorEl={notificationsEl}\n\t\t\t\t\tanchorOrigin={{\n\t\t\t\t\t\tvertical: \"bottom\",\n\t\t\t\t\t\thorizontal: \"center\"\n\t\t\t\t\t}}\n\t\t\t\t\tonClose={this.handleCloseNotifications}\n\t\t\t\t\topen={showNotifications}\n\t\t\t\t\ttransformOrigin={{\n\t\t\t\t\t\tvertical: \"top\",\n\t\t\t\t\t\thorizontal: \"center\"\n\t\t\t\t\t}}>\n\t\t\t\t\t<NotificationList\n\t\t\t\t\t\tnotifications={notifications}\n\t\t\t\t\t\tonSelect={this.handleCloseNotifications}\n\t\t\t\t\t/>\n\t\t\t\t</Popover>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nTopbar.propTypes = {\n\tclassName: PropTypes.string,\n\tclasses: PropTypes.object.isRequired,\n\thistory: PropTypes.object.isRequired,\n\tisSidebarOpen: PropTypes.bool,\n\tonToggleSidebar: PropTypes.func,\n\ttitle: PropTypes.string\n};\n\nTopbar.defaultProps = {\n\tonToggleSidebar: () => {}\n};\n\nexport default compose(\n\twithRouter,\n\twithStyles(styles)\n)(Topbar);\n"]},"metadata":{},"sourceType":"module"}