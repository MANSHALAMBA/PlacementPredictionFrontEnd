{"ast":null,"code":"var _jsxFileName = \"/home/lambamansha/Desktop/minorproject/src/views/StudyMaterialList/index.jsx\";\nimport React, { Component } from \"react\";\nimport { Dashboard as DashboardLayout } from \"layouts\";\nimport Loader from \"./components/loader\";\nimport { connect } from \"react-redux\";\nimport { Content } from \"serializers/content\";\nimport swal from \"sweetalert\";\nimport { Typography } from \"@material-ui/core\";\nimport { APTITUDE } from \"../../constants\";\nimport style from \"./style.module.css\"; // styles\n\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\n\nclass TopPanel extends Component {\n  pauseGame() {\n    this.props.pauseGame();\n  }\n\n  runGame() {\n    if (this.props.aliveCount > 0) {\n      this.props.runGame();\n    }\n  }\n\n  clearBoard() {\n    // true for clearSquares\n    this.props.clearGame(true);\n  }\n\n  render() {\n    let panelWidth = {\n      width: this.props.width\n    };\n    return React.createElement(\"div\", {\n      style: panelWidth,\n      className: style.top - controls,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: style.control - button,\n      onClick: this.runGame.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Run\"), React.createElement(\"button\", {\n      className: style.control - button,\n      onClick: this.pauseGame.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Pause\"), React.createElement(\"button\", {\n      className: style.control - button,\n      onClick: this.clearBoard.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Clear\"), React.createElement(\"div\", {\n      className: style.generations,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Generations: \", this.props.generations));\n  }\n\n}\n\nclass Person extends React.Component {\n  clickSquare() {\n    this.props.clickSquare(this.props.id);\n  }\n\n  render() {\n    let aliveColor = this.props.newPerson ? \"rgba(0,220,200,1)\" : \"rgba(0,100,100, 1)\";\n    let backgroundColor = this.props.isAlive ? aliveColor : \"none\";\n    let squareStyle = {\n      height: this.props.squareSize,\n      width: this.props.squareSize,\n      background: backgroundColor\n    };\n    return React.createElement(\"span\", {\n      onClick: this.clickSquare.bind(this),\n      className: style.person,\n      style: squareStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass StudymaterialList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      people: [],\n      squareSize: 14,\n      numCols: 50,\n      numRows: 30,\n      generations: 1,\n      aliveStates: null,\n      paused: false,\n      aliveCount: 0,\n      newPeople: []\n    };\n  }\n\n  componentWillMount() {\n    // stores keys of coordinates with alive or dead boolean.\n    // example: aliveStates['0,0'] = 1 (true);\n    this.resetBoard();\n  }\n\n  resetBoard(clearSquares = false) {\n    let aliveStates = {};\n    let aliveCount = 0;\n    let people = [];\n\n    if (clearSquares) {\n      this.setState({\n        paused: true\n      });\n    }\n\n    let alive;\n\n    for (let row = 0; row < this.state.numRows; row++) {\n      // Make columns\n      for (let col = 0; col < this.state.numCols; col++) {\n        if (clearSquares) {\n          alive = 0;\n        } else {\n          alive = Math.floor(Math.random() * 10) > 6 ? 1 : 0;\n          people.push([row, col]);\n        }\n\n        if (alive === 1) {\n          aliveCount++;\n        }\n\n        aliveStates[\"\".concat(row, \",\").concat(col)] = alive;\n      }\n    }\n\n    if (clearSquares) {\n      this.setState({\n        aliveStates: aliveStates,\n        generations: 0,\n        aliveCount: 0\n      });\n    } else {\n      let squareSize = this.state.squareSize;\n      let amount = this.state.numRows * this.state.numCols;\n      this.setState({\n        people: people,\n        aliveStates: aliveStates,\n        totalSquares: amount,\n        aliveCount: aliveCount\n      });\n    }\n  }\n\n  getNeighbors(currentRow, currentCol) {\n    let numCols = this.state.numCols;\n    let numRows = this.state.numRows;\n    let moveDirections = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n    let currentPair = [];\n    let neighbors = moveDirections.map(pair => {\n      currentPair = [currentRow + pair[0], currentCol + pair[1]];\n\n      if (currentPair[0] < 0) {\n        currentPair = [numRows - 1, currentPair[1]];\n      } else if (currentPair[0] >= numRows) {\n        currentPair = [0, currentPair[1]];\n      }\n\n      if (currentPair[1] >= numCols) {\n        currentPair = [currentPair[0], 0];\n      } else if (currentPair[1] < 0) {\n        currentPair = [currentPair[0], numCols - 1];\n      }\n\n      return currentPair;\n    });\n    return neighbors;\n  }\n\n  checkAlive(isAlive, currentRow, currentCol) {\n    // returns 2 dimensional array of neighbors\n    let neighbors = this.getNeighbors(currentRow, currentCol);\n    let livingNeighbors = 0;\n\n    for (var i = 0; i < neighbors.length; i++) {\n      if (this.state.aliveStates[\"\".concat(neighbors[i][0], \",\").concat(neighbors[i][1])] === 1) {\n        livingNeighbors += 1;\n      }\n    }\n\n    if (isAlive === 1) {\n      if (livingNeighbors < 2 || livingNeighbors > 3) {\n        return 0;\n      }\n\n      return 1;\n    } else {\n      // wasn't alive\n      if (livingNeighbors === 3) {\n        return 1;\n      }\n\n      return 0;\n    }\n  }\n\n  updatePopulation() {\n    let people = this.state.people;\n    let newPeople = [];\n    let aliveCount = 0;\n    let aliveStates = JSON.parse(JSON.stringify(this.state.aliveStates));\n\n    for (let i = 0; i < this.state.totalSquares; i++) {\n      let currentRow = people[i][0];\n      let currentCol = people[i][1];\n      let location = \"\".concat(currentRow, \",\").concat(currentCol);\n      let wasAlive = aliveStates[location];\n      let isAlive = this.checkAlive(wasAlive, currentRow, currentCol);\n\n      if (wasAlive) {\n        aliveCount++;\n      }\n\n      if (!wasAlive && isAlive) {\n        newPeople.push(location);\n      }\n\n      aliveStates[location] = isAlive;\n    }\n\n    setTimeout(() => {\n      if (this.state.paused) {\n        return;\n      }\n\n      if (aliveCount === 0) {\n        this.setState({\n          aliveStates: aliveStates,\n          generations: 0,\n          aliveCount: 0,\n          paused: true,\n          newPeople: []\n        });\n        return;\n      }\n\n      this.setState({\n        aliveStates: aliveStates,\n        generations: this.state.generations + 1,\n        aliveCount: aliveCount,\n        newPeople: newPeople,\n        updateQueue: []\n      });\n    }, 60);\n  }\n\n  renderSquares() {\n    if (!this.state.paused && this.state.aliveCount > 0) {\n      this.updatePopulation();\n    }\n\n    if (!this.state.people || this.state.people.length < 1 || !this.state.aliveStates) {\n      return null;\n    }\n\n    let aliveStates = this.state.aliveStates;\n    let newPeople = this.state.newPeople;\n    let alive;\n    let coords;\n    let result = this.state.people.map(location => {\n      coords = \"\".concat(location[0], \",\").concat(location[1]);\n      alive = aliveStates[coords];\n      let newPerson = newPeople.indexOf(coords) !== -1 ? true : false;\n      return React.createElement(Person, {\n        key: coords,\n        id: coords,\n        squareSize: this.state.squareSize,\n        clickSquare: this.clickSquare.bind(this),\n        newPerson: newPerson,\n        isAlive: alive,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      });\n    });\n    return result;\n  } // Controls\n\n\n  pauseGame() {\n    this.setState({\n      paused: true\n    });\n  }\n\n  runGame() {\n    if (this.state.aliveCount > 0) {\n      this.setState({\n        paused: false\n      });\n    }\n  } // Handles updating squares\n\n\n  clickSquare(location) {\n    let aliveStates = JSON.parse(JSON.stringify(this.state.aliveStates));\n    let aliveCount = this.state.aliveCount;\n    let newPeople = JSON.parse(JSON.stringify(this.state.newPeople));\n    let alive = aliveStates[location] === 0 ? 1 : 0;\n    aliveStates[location] = alive;\n\n    if (this.state.paused) {\n      if (alive) {\n        aliveCount++;\n\n        if (newPeople.indexOf(location) === -1) {\n          newPeople.push(location);\n        }\n      } else {\n        aliveCount--;\n      }\n\n      this.setState({\n        aliveStates: aliveStates,\n        aliveCount: aliveCount,\n        newPeople: newPeople\n      });\n    }\n  }\n\n  render() {\n    let gameStyles = {\n      height: this.state.numRows * this.state.squareSize + 1.5 + \"px\",\n      width: this.state.numCols * this.state.squareSize + 1.5 + \"px\"\n    };\n    const classes = this.props.classes;\n    return React.createElement(DashboardLayout, {\n      mode: APTITUDE,\n      title: \"APTITUDE\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: style.game - of - life,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"game\",\n      style: gameStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, React.createElement(TopPanel, {\n      width: this.state.numCols * this.state.squareSize * 4 / 6,\n      generations: this.state.generations,\n      pauseGame: this.pauseGame.bind(this),\n      runGame: this.runGame.bind(this),\n      aliveCount: this.state.aliveCount,\n      clearGame: this.resetBoard.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), this.renderSquares()))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(StudymaterialList));","map":{"version":3,"sources":["/home/lambamansha/Desktop/minorproject/src/views/StudyMaterialList/index.jsx"],"names":["React","Component","Dashboard","DashboardLayout","Loader","connect","Content","swal","Typography","APTITUDE","style","styles","withStyles","TopPanel","pauseGame","props","runGame","aliveCount","clearBoard","clearGame","render","panelWidth","width","top","controls","control","button","bind","generations","Person","clickSquare","id","aliveColor","newPerson","backgroundColor","isAlive","squareStyle","height","squareSize","background","person","StudymaterialList","constructor","state","people","numCols","numRows","aliveStates","paused","newPeople","componentWillMount","resetBoard","clearSquares","setState","alive","row","col","Math","floor","random","push","amount","totalSquares","getNeighbors","currentRow","currentCol","moveDirections","currentPair","neighbors","map","pair","checkAlive","livingNeighbors","i","length","updatePopulation","JSON","parse","stringify","location","wasAlive","setTimeout","updateQueue","renderSquares","coords","result","indexOf","gameStyles","classes","root","game","of","life","mapStateToProps","token","auth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Dashboard as DashboardLayout } from \"layouts\";\n\nimport Loader from \"./components/loader\";\n\nimport { connect } from \"react-redux\";\nimport { Content } from \"serializers/content\";\nimport swal from \"sweetalert\";\nimport { Typography } from \"@material-ui/core\";\nimport { APTITUDE } from \"../../constants\";\nimport style from \"./style.module.css\";\n// styles\nimport styles from \"./styles\";\nimport { withStyles } from \"@material-ui/styles\";\n\nclass TopPanel extends Component {\n  pauseGame() {\n    this.props.pauseGame();\n  }\n\n  runGame() {\n    if (this.props.aliveCount > 0) {\n      this.props.runGame();\n    }\n  }\n\n  clearBoard() {\n    // true for clearSquares\n    this.props.clearGame(true);\n  }\n\n  render() {\n    let panelWidth = {\n      width: this.props.width\n    };\n    return (\n      <div style={panelWidth} className={style.top - controls}>\n        <button\n          className={style.control - button}\n          onClick={this.runGame.bind(this)}\n        >\n          Run\n        </button>\n        <button\n          className={style.control - button}\n          onClick={this.pauseGame.bind(this)}\n        >\n          Pause\n        </button>\n        <button\n          className={style.control - button}\n          onClick={this.clearBoard.bind(this)}\n        >\n          Clear\n        </button>\n        <div className={style.generations}>\n          Generations: {this.props.generations}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Person extends React.Component {\n  clickSquare() {\n    this.props.clickSquare(this.props.id);\n  }\n\n  render() {\n    let aliveColor = this.props.newPerson\n      ? \"rgba(0,220,200,1)\"\n      : \"rgba(0,100,100, 1)\";\n    let backgroundColor = this.props.isAlive ? aliveColor : \"none\";\n    let squareStyle = {\n      height: this.props.squareSize,\n      width: this.props.squareSize,\n      background: backgroundColor\n    };\n    return (\n      <span\n        onClick={this.clickSquare.bind(this)}\n        className={style.person}\n        style={squareStyle}\n      ></span>\n    );\n  }\n}\n\nclass StudymaterialList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      people: [],\n      squareSize: 14,\n      numCols: 50,\n      numRows: 30,\n      generations: 1,\n      aliveStates: null,\n      paused: false,\n      aliveCount: 0,\n      newPeople: []\n    };\n  }\n\n  componentWillMount() {\n    // stores keys of coordinates with alive or dead boolean.\n    // example: aliveStates['0,0'] = 1 (true);\n    this.resetBoard();\n  }\n\n  resetBoard(clearSquares = false) {\n    let aliveStates = {};\n    let aliveCount = 0;\n    let people = [];\n    if (clearSquares) {\n      this.setState({\n        paused: true\n      });\n    }\n\n    let alive;\n    for (let row = 0; row < this.state.numRows; row++) {\n      // Make columns\n      for (let col = 0; col < this.state.numCols; col++) {\n        if (clearSquares) {\n          alive = 0;\n        } else {\n          alive = Math.floor(Math.random() * 10) > 6 ? 1 : 0;\n          people.push([row, col]);\n        }\n        if (alive === 1) {\n          aliveCount++;\n        }\n        aliveStates[`${row},${col}`] = alive;\n      }\n    }\n\n    if (clearSquares) {\n      this.setState({\n        aliveStates: aliveStates,\n        generations: 0,\n        aliveCount: 0\n      });\n    } else {\n      let squareSize = this.state.squareSize;\n      let amount = this.state.numRows * this.state.numCols;\n      this.setState({\n        people: people,\n        aliveStates: aliveStates,\n        totalSquares: amount,\n        aliveCount: aliveCount\n      });\n    }\n  }\n\n  getNeighbors(currentRow, currentCol) {\n    let numCols = this.state.numCols;\n    let numRows = this.state.numRows;\n    let moveDirections = [\n      [-1, -1],\n      [-1, 0],\n      [-1, 1],\n      [0, -1],\n      [0, 1],\n      [1, -1],\n      [1, 0],\n      [1, 1]\n    ];\n\n    let currentPair = [];\n    let neighbors = moveDirections.map(pair => {\n      currentPair = [currentRow + pair[0], currentCol + pair[1]];\n      if (currentPair[0] < 0) {\n        currentPair = [numRows - 1, currentPair[1]];\n      } else if (currentPair[0] >= numRows) {\n        currentPair = [0, currentPair[1]];\n      }\n\n      if (currentPair[1] >= numCols) {\n        currentPair = [currentPair[0], 0];\n      } else if (currentPair[1] < 0) {\n        currentPair = [currentPair[0], numCols - 1];\n      }\n      return currentPair;\n    });\n    return neighbors;\n  }\n\n  checkAlive(isAlive, currentRow, currentCol) {\n    // returns 2 dimensional array of neighbors\n    let neighbors = this.getNeighbors(currentRow, currentCol);\n\n    let livingNeighbors = 0;\n\n    for (var i = 0; i < neighbors.length; i++) {\n      if (\n        this.state.aliveStates[`${neighbors[i][0]},${neighbors[i][1]}`] === 1\n      ) {\n        livingNeighbors += 1;\n      }\n    }\n\n    if (isAlive === 1) {\n      if (livingNeighbors < 2 || livingNeighbors > 3) {\n        return 0;\n      }\n      return 1;\n    } else {\n      // wasn't alive\n      if (livingNeighbors === 3) {\n        return 1;\n      }\n      return 0;\n    }\n  }\n\n  updatePopulation() {\n    let people = this.state.people;\n    let newPeople = [];\n    let aliveCount = 0;\n    let aliveStates = JSON.parse(JSON.stringify(this.state.aliveStates));\n\n    for (let i = 0; i < this.state.totalSquares; i++) {\n      let currentRow = people[i][0];\n      let currentCol = people[i][1];\n      let location = `${currentRow},${currentCol}`;\n      let wasAlive = aliveStates[location];\n      let isAlive = this.checkAlive(wasAlive, currentRow, currentCol);\n\n      if (wasAlive) {\n        aliveCount++;\n      }\n\n      if (!wasAlive && isAlive) {\n        newPeople.push(location);\n      }\n\n      aliveStates[location] = isAlive;\n    }\n\n    setTimeout(() => {\n      if (this.state.paused) {\n        return;\n      }\n      if (aliveCount === 0) {\n        this.setState({\n          aliveStates: aliveStates,\n          generations: 0,\n          aliveCount: 0,\n          paused: true,\n          newPeople: []\n        });\n        return;\n      }\n\n      this.setState({\n        aliveStates: aliveStates,\n        generations: this.state.generations + 1,\n        aliveCount: aliveCount,\n        newPeople: newPeople,\n        updateQueue: []\n      });\n    }, 60);\n  }\n\n  renderSquares() {\n    if (!this.state.paused && this.state.aliveCount > 0) {\n      this.updatePopulation();\n    }\n    if (\n      !this.state.people ||\n      this.state.people.length < 1 ||\n      !this.state.aliveStates\n    ) {\n      return null;\n    }\n    let aliveStates = this.state.aliveStates;\n    let newPeople = this.state.newPeople;\n    let alive;\n    let coords;\n    let result = this.state.people.map(location => {\n      coords = `${location[0]},${location[1]}`;\n      alive = aliveStates[coords];\n      let newPerson = newPeople.indexOf(coords) !== -1 ? true : false;\n      return (\n        <Person\n          key={coords}\n          id={coords}\n          squareSize={this.state.squareSize}\n          clickSquare={this.clickSquare.bind(this)}\n          newPerson={newPerson}\n          isAlive={alive}\n        />\n      );\n    });\n    return result;\n  }\n  // Controls\n  pauseGame() {\n    this.setState({\n      paused: true\n    });\n  }\n\n  runGame() {\n    if (this.state.aliveCount > 0) {\n      this.setState({\n        paused: false\n      });\n    }\n  }\n\n  // Handles updating squares\n  clickSquare(location) {\n    let aliveStates = JSON.parse(JSON.stringify(this.state.aliveStates));\n    let aliveCount = this.state.aliveCount;\n    let newPeople = JSON.parse(JSON.stringify(this.state.newPeople));\n    let alive = aliveStates[location] === 0 ? 1 : 0;\n    aliveStates[location] = alive;\n    if (this.state.paused) {\n      if (alive) {\n        aliveCount++;\n        if (newPeople.indexOf(location) === -1) {\n          newPeople.push(location);\n        }\n      } else {\n        aliveCount--;\n      }\n      this.setState({\n        aliveStates: aliveStates,\n        aliveCount: aliveCount,\n        newPeople: newPeople\n      });\n    }\n  }\n\n  render() {\n    let gameStyles = {\n      height: this.state.numRows * this.state.squareSize + 1.5 + \"px\",\n      width: this.state.numCols * this.state.squareSize + 1.5 + \"px\"\n    };\n    const { classes } = this.props;\n    return (\n      <DashboardLayout mode={APTITUDE} title=\"APTITUDE\">\n        <div className={classes.root}>\n          <div className={style.game - of - life}>\n            <div id=\"game\" style={gameStyles}>\n              <TopPanel\n                width={(this.state.numCols * this.state.squareSize * 4) / 6}\n                generations={this.state.generations}\n                pauseGame={this.pauseGame.bind(this)}\n                runGame={this.runGame.bind(this)}\n                aliveCount={this.state.aliveCount}\n                clearGame={this.resetBoard.bind(this)}\n              />\n              {this.renderSquares()}\n            </div>\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token\n  };\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(StudymaterialList));\n"]},"metadata":{},"sourceType":"module"}